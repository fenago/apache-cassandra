{
  "paragraphs": [
    {
      "text": "%sh\nSTATUS=\"$(service cassandra status)\"\n\nif [[ $STATUS == *\"is running\"* ]]; then\n    echo \"Cassandra is running\"\nelse \n    echo \" Cassandra not running .... Starting\"  \n    service cassandra restart > /dev/null 2>&1 &\n    echo \" Started\"  \nfi",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:21:19+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613233304_2113270520",
      "id": "paragraph_1593613233304_2113270520",
      "dateCreated": "2020-07-01T14:20:33+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:118"
    },
    {
      "text": "%md\n\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\n# <center><span style=\"color:teal\">Set Up the Notebook</span></center>\n\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\n- #### Execute a CQL script to initialize the KillrVideo database for this notebook\n\n#### <span style=\"color:teal\"><b>Step 1:</b></span> Execute the following cell to initialize this notebook. Hover over the right-hand corner of that cell and click the _Run_ button.\n![](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/ExecuteCell.png)\n\n#### **Note:** You don't see the CQL script because the code editor is hidden, but you can still run the cell.\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:44:53+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">Set Up the Notebook</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>\n<h4>Execute a CQL script to initialize the KillrVideo database for this notebook</h4>\n</li>\n</ul>\n<h4><span style=\"color:teal\"><b>Step 1:</b></span> Execute the following cell to initialize this notebook. Hover over the right-hand corner of that cell and click the <em>Run</em> button.</h4>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/ExecuteCell.png\" alt=\"\" /></p>\n<h4><strong>Note:</strong> You don&rsquo;t see the CQL script because the code editor is hidden, but you can still run the cell.</h4>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260926_705631125",
      "id": "paragraph_1593613260926_705631125",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "dateStarted": "2020-07-01T14:44:49+0000",
      "dateFinished": "2020-07-01T14:44:49+0000",
      "status": "FINISHED",
      "$$hashKey": "object:119"
    },
    {
      "text": "CREATE KEYSPACE IF NOT EXISTS killrvideo WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\n\nuse killrvideo;\n\n// Remove this section after DROP bug is fixed (https://datastax.jira.com/browse/CP-3499)\n// Note we create the tables and then drop them so we can recreate them.\n// This assures us the tables have the correct configuration.\n// If we only did the CREATE TABLE IF NOT EXISTS, we might end up with a table with the wrong columns or something...\nCREATE TABLE IF NOT EXISTS user_credentials (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS users (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS videos (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS user_videos (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS latest_videos (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_ratings (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_ratings_by_user (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_playback_stats (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_recommendations (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_recommendations_by_video (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS videos_by_tag (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS tags_by_letter (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS comments_by_video (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS comments_by_user (key text, PRIMARY KEY(key));\n// END removable section\n\nDROP TABLE IF EXISTS user_credentials;\nDROP TABLE IF EXISTS users;\nDROP TABLE IF EXISTS videos;\nDROP TABLE IF EXISTS user_videos;\nDROP TABLE IF EXISTS latest_videos;\nDROP TABLE IF EXISTS video_ratings;\nDROP TABLE IF EXISTS video_ratings_by_user;\nDROP TABLE IF EXISTS video_playback_stats;\nDROP TABLE IF EXISTS video_recommendations;\nDROP TABLE IF EXISTS video_recommendations_by_video;\nDROP TABLE IF EXISTS videos_by_tag;\nDROP TABLE IF EXISTS tags_by_letter;\nDROP TABLE IF EXISTS comments_by_video;\nDROP TABLE IF EXISTS comments_by_user;\n\n\n// User credentials, keyed by email address so we can authenticate\nCREATE TABLE IF NOT EXISTS user_credentials (\n    email     text,\n    password  text,\n    userid    uuid,\n    PRIMARY KEY (email)\n);\n\n// Users keyed by id\nCREATE TABLE IF NOT EXISTS users (\n    userid     uuid,\n    firstname  text,\n    lastname   text,\n    email      text,\n    created_date timestamp,\n    PRIMARY KEY (userid)\n);\n\n// Videos by id\nCREATE TABLE IF NOT EXISTS videos (\n    videoid                uuid,\n    userid                 uuid,\n    name                   text,\n    description            text,\n    location               text,\n    location_type          int,\n    preview_image_location text,\n    tags                   set<text>,\n    added_date             timestamp,\n    PRIMARY KEY (videoid)\n);\n\n// One-to-many from user point of view (lookup table)\nCREATE TABLE IF NOT EXISTS user_videos (\n    userid                 uuid,\n    added_date             timestamp,\n    videoid                uuid,\n    name                   text,\n    preview_image_location text,\n    PRIMARY KEY (userid, added_date, videoid)\n) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);\n\n// Track latest videos, grouped by day (if we ever develop a bad hotspot from the daily grouping here, we could mitigate by\n// splitting the row using an arbitrary group number, making the partition key (yyyymmdd, group_number))\nCREATE TABLE IF NOT EXISTS latest_videos (\n    yyyymmdd text,\n    added_date timestamp,\n    videoid uuid,\n    userid uuid,\n    name text,\n    preview_image_location text,\n    PRIMARY KEY (yyyymmdd, added_date, videoid)\n) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);\n\n// Video ratings (counter table)\nCREATE TABLE IF NOT EXISTS video_ratings (\n    videoid uuid,\n    rating_counter counter,\n    rating_total counter,\n    PRIMARY KEY (videoid)\n);\n\n// Video ratings by user (to try and mitigate voting multiple times)\nCREATE TABLE IF NOT EXISTS video_ratings_by_user (\n    videoid uuid,\n    userid uuid,\n    rating int,\n    PRIMARY KEY (videoid, userid)\n);\n\n// Records the number of views/playbacks of a video\nCREATE TABLE IF NOT EXISTS video_playback_stats (\n    videoid uuid,\n    views counter,\n    PRIMARY KEY (videoid)\n);\n\n// Recommendations by user (powered by Spark), with the newest videos added to the site always first\nCREATE TABLE IF NOT EXISTS video_recommendations ( \n    userid uuid,\n    added_date timestamp,\n    videoid uuid,\n    rating float,\n    authorid uuid,\n    name text,\n    preview_image_location text,\n    PRIMARY KEY(userid, added_date, videoid)\n) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);\n\n// Recommendations by video (powered by Spark)\nCREATE TABLE IF NOT EXISTS video_recommendations_by_video (\n    videoid uuid,\n    userid uuid,\n    rating float,\n    added_date timestamp STATIC,\n    authorid uuid STATIC,\n    name text STATIC,\n    preview_image_location text STATIC,\n    PRIMARY KEY(videoid, userid)\n);\n\n// Index for tag keywords\nCREATE TABLE IF NOT EXISTS videos_by_tag (\n    tag text,\n    videoid uuid,\n    added_date timestamp,\n    userid uuid,\n    name text,\n    preview_image_location text,\n    tagged_date timestamp,\n    PRIMARY KEY (tag, videoid)\n);\n\n// Index for tags by first letter in the tag\nCREATE TABLE IF NOT EXISTS tags_by_letter (\n    first_letter text,\n    tag text,\n    PRIMARY KEY (first_letter, tag)\n);\n\n// Comments for a given video\nCREATE TABLE IF NOT EXISTS comments_by_video (\n    videoid uuid,\n    commentid timeuuid,\n    userid uuid,\n    comment text,\n    PRIMARY KEY (videoid, commentid)\n) WITH CLUSTERING ORDER BY (commentid DESC);\n\n// Comments for a given user\nCREATE TABLE IF NOT EXISTS comments_by_user (\n    userid uuid,\n    commentid timeuuid,\n    videoid uuid,\n    comment text,\n    PRIMARY KEY (userid, commentid)\n) WITH CLUSTERING ORDER BY (commentid DESC);\n\n//CREATE SEARCH INDEX ON killrvideo.videos;\n\nINSERT INTO killrvideo.users (userid, created_date, firstname, lastname, email)\n  VALUES(11111111-1111-1111-1111-111111111111, toTimestamp(now()), 'Jeff', 'Carpenter', 'jc@datastax.com');\nINSERT INTO killrvideo.user_credentials (userid, email, password)\n  VALUES(11111111-1111-1111-1111-111111111111, 'jc@datastax.com', 'J3ffL0v3$C@ss@ndr@');\n  \nINSERT INTO killrvideo.users (userid, created_date, firstname, lastname, email)\n  VALUES(22222222-2222-2222-2222-222222222222, toTimestamp(now()), 'Eric', 'Zietlow', 'ez@datastax.com');\nINSERT INTO killrvideo.user_credentials (userid, email, password)\n  VALUES(22222222-2222-2222-2222-222222222222, 'ez@datastax.com', 'C@ss@ndr@R0ck$');\n\nINSERT INTO killrvideo.users (userid, created_date, firstname, lastname, email)\n  VALUES(33333333-3333-3333-3333-333333333333, toTimestamp(now()), 'Cedrick', 'Lunven', 'cl@datastax.com');\nINSERT INTO killrvideo.user_credentials (userid, email, password)\n  VALUES(33333333-3333-3333-3333-333333333333, 'cl@datastax.com', 'Fr@nc3L0v3$C@ss@ndr@');\n\nINSERT INTO killrvideo.users (userid, created_date, firstname, lastname, email)\n  VALUES(44444444-4444-4444-4444-444444444444, toTimestamp(now()), 'David', 'Gilardi', 'dg@datastax.com');\nINSERT INTO killrvideo.user_credentials (userid, email, password)\n  VALUES(44444444-4444-4444-4444-444444444444, 'dg@datastax.com', 'H@t$0ff2C@ss@ndr@');\n\n//INSERT INTO killrvideo.users (userid, created_date, firstname, lastname, email)\n//  VALUES(55555555-5555-5555-5555-555555555555, toTimestamp(now()), 'Cristina', 'Veale', 'cv@datastax.com');\n//INSERT INTO killrvideo.user_credentials (userid, email, password)\n//  VALUES(55555555-5555-5555-5555-555555555555, 'cv@datastax.com', '3@$tC0@$tC@ss@ndr@');\n\nINSERT INTO killrvideo.users (userid, created_date, firstname, lastname, email)\n  VALUES(66666666-6666-6666-6666-666666666666, toTimestamp(now()), 'Adron', 'Hall', 'ah@datastax.com');\nINSERT INTO killrvideo.user_credentials (userid, email, password)\n  VALUES(66666666-6666-6666-6666-666666666666, 'ah@datastax.com', 'C@ss@ndr@43v3r');\n\nINSERT INTO killrvideo.users (userid, created_date, firstname, lastname, email)\n  VALUES(77777777-7777-7777-7777-777777777777, toTimestamp(now()), 'Aleks', 'volochnev', 'av@datastax.com');\nINSERT INTO killrvideo.user_credentials (userid, email, password)\n  VALUES(77777777-7777-7777-7777-777777777777, 'av@datastax.com', 'C@ss@ndr@3v3rywh3r3');\n\n// This won't work with CaaS\n//CREATE KEYSPACE IF NOT EXISTS kv_init_done WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:22:13+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262668_-219283811",
      "id": "paragraph_1593613262668_-219283811",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "READY",
      "$$hashKey": "object:120"
    },
    {
      "text": "%md\n\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\n# <center><span style=\"color:teal\">`INSERT` with Lightweight Transactions (LWTs)</span></center>\n\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\n- #### Insert a new row using an LWT\n- #### Insert an existing row using an LWT\n- #### Observe the two behaviors (and compare them to an upsert)\n\n#### <b>Here's the story:</b>\n#### Imagine we want to create a new KillrVideo user. To do so, we need to create an entry in the `user_credentials` table with a specified email address. But we don’t want to create a new user if there is a user already with that email address.\n#### We could read the database to determine if the user exists already, but what if, between reading and creating the user, somebody else creates the same user. That would cause an upsert that we want to avoid.\n#### Instead, we’ll create the user with a lightweight transaction (LWT). This will make sure that Cassandra does a read-before-write as an atomic operation.\n<br>\n <span style=\"color:teal\"><b>Step 1:</b></span> In the following cell, Write an `INSERT` command, with an LWT, to create a user in the `user_credentials` table. Use the following table to inform your values.\n<h4><center>\n <table style=\"width:40%\" border=\"1\">\n  <tr style=\"background-color:blue;color:white\">\n    <th>Column Name</th>\n    <th>Value</th>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>email</td>\n    <td>'cv@fenago.com`</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>password</td>\n    <td>'3@$tC0@$tC@ss@ndr@'</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>userid</td>\n    <td>55555555-5555-5555-5555-555555555555</td>\n  </tr>\n </table>\n</center></h4>\n\n<br>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n\nAs mentioned, create an `INSERT` command for the `killrvideo.user_credentials` table. Use the column names and values from the table above. Tack on the `IF NOT EXISTS` clause (this is the LWT) to the end of the statement.\n</details>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n\n```\nINSERT INTO killrvideo.user_credentials (email, password, userid)\nVALUES('cv@fenago.com', '3@$tC0@$tC@ss@ndr@', 55555555-5555-5555-5555-555555555555)\nIF NOT EXISTS;\n```\n\n</details>\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T06:44:26+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\"><code>INSERT</code> with Lightweight Transactions (LWTs)</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>\n<h4>Insert a new row using an LWT</h4>\n</li>\n<li>\n<h4>Insert an existing row using an LWT</h4>\n</li>\n<li>\n<h4>Observe the two behaviors (and compare them to an upsert)</h4>\n</li>\n</ul>\n<h4><b>Here&rsquo;s the story:</b></h4>\n<h4>Imagine we want to create a new KillrVideo user. To do so, we need to create an entry in the <code>user_credentials</code> table with a specified email address. But we don’t want to create a new user if there is a user already with that email address.</h4>\n<h4>We could read the database to determine if the user exists already, but what if, between reading and creating the user, somebody else creates the same user. That would cause an upsert that we want to avoid.</h4>\n<h4>Instead, we’ll create the user with a lightweight transaction (LWT). This will make sure that Cassandra does a read-before-write as an atomic operation.</h4>\n<br>\n <span style=\"color:teal\"><b>Step 1:</b></span> In the following cell, Write an `INSERT` command, with an LWT, to create a user in the `user_credentials` table. Use the following table to inform your values.\n<h4><center>\n <table style=\"width:40%\" border=\"1\">\n  <tr style=\"background-color:blue;color:white\">\n    <th>Column Name</th>\n    <th>Value</th>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>email</td>\n    <td>'cv@fenago.com`</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>password</td>\n    <td>'3@$tC0@$tC@ss@ndr@'</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>userid</td>\n    <td>55555555-5555-5555-5555-555555555555</td>\n  </tr>\n </table>\n</center></h4>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n<p>As mentioned, create an <code>INSERT</code> command for the <code>killrvideo.user_credentials</code> table. Use the column names and values from the table above. Tack on the <code>IF NOT EXISTS</code> clause (this is the LWT) to the end of the statement.</p>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n<pre><code>INSERT INTO killrvideo.user_credentials (email, password, userid)\nVALUES('cv@fenago.com', '3@$tC0@$tC@ss@ndr@', 55555555-5555-5555-5555-555555555555)\nIF NOT EXISTS;\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262666_1896289389",
      "id": "paragraph_1593613262666_1896289389",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "dateStarted": "2020-07-02T06:44:26+0000",
      "dateFinished": "2020-07-02T06:44:26+0000",
      "status": "FINISHED",
      "$$hashKey": "object:121"
    },
    {
      "text": "// Enter and execute the insert command in this cell\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:33:50+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262588_298672998",
      "id": "paragraph_1593613262588_298672998",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "READY",
      "$$hashKey": "object:122"
    },
    {
      "text": "%md\r\n\r\nThe `INSERT` returns a table with a single column named `[applied]`\r\n(with the square brackets in the name of the column).\r\n\r\n![UCLWTSuccess](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UCLWTSuccess.png)\r\n\r\nWhen the `[applied]` column has a Boolean value of `true`, it means the\r\n`INSERT` succeeded. ",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:46:25+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>The <code>INSERT</code> returns a table with a single column named <code>[applied]</code><br />\n(with the square brackets in the name of the column).</p>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UCLWTSuccess.png\" alt=\"UCLWTSuccess\" /></p>\n<p>When the <code>[applied]</code> column has a Boolean value of <code>true</code>, it means the<br />\n<code>INSERT</code> succeeded.</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262587_2068897536",
      "id": "paragraph_1593613262587_2068897536",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "dateStarted": "2020-07-01T14:46:24+0000",
      "dateFinished": "2020-07-01T14:46:24+0000",
      "status": "FINISHED",
      "$$hashKey": "object:123"
    },
    {
      "text": "%md\n\nThe `INSERT` returns a table with a single column named `[applied]` (with the square brackets in the name of the column).\n\n![UCLWTSuccess](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UCLWTSuccess.png)\n\nWhen the `[applied]` column has a Boolean value of `true`, it means the `INSERT` succeeded.\n<br>\n#### <span style=\"color:teal\"><b>Step 2:</b></span> In the next cell, run the exact same `INSERT` command you ran in Step 1.\n<br>\n\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n\n> #### We're all out of hints! Just copy the command you used in the previous step.\n</details>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n\n```\nINSERT INTO killrvideo.user_credentials (email, password, userid)\nVALUES('cv@datastax.com', '3@$tC0@$tC@ss@ndr@', 55555555-5555-5555-5555-555555555555)\nIF NOT EXISTS;\n```\n\n</details>\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:47:22+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>The <code>INSERT</code> returns a table with a single column named <code>[applied]</code> (with the square brackets in the name of the column).</p>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UCLWTSuccess.png\" alt=\"UCLWTSuccess\" /></p>\n<p>When the <code>[applied]</code> column has a Boolean value of <code>true</code>, it means the <code>INSERT</code> succeeded.<br />\n<br></p>\n<h4><span style=\"color:teal\"><b>Step 2:</b></span> In the next cell, run the exact same <code>INSERT</code> command you ran in Step 1.</h4>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n<blockquote>\n<h4>We&rsquo;re all out of hints! Just copy the command you used in the previous step.</h4>\n</blockquote>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n<pre><code>INSERT INTO killrvideo.user_credentials (email, password, userid)\nVALUES('cv@datastax.com', '3@$tC0@$tC@ss@ndr@', 55555555-5555-5555-5555-555555555555)\nIF NOT EXISTS;\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262586_59626477",
      "id": "paragraph_1593613262586_59626477",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "dateStarted": "2020-07-01T14:47:22+0000",
      "dateFinished": "2020-07-01T14:47:22+0000",
      "status": "FINISHED",
      "$$hashKey": "object:124"
    },
    {
      "text": "// Enter and execute the same command in this cell as you did in the previous step\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:34:05+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262227_557463572",
      "id": "paragraph_1593613262227_557463572",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "READY",
      "$$hashKey": "object:125"
    },
    {
      "text": "%md\n\n#### Notice that this time the `INSERT` returns a row that includes the `[applied]` column along with the other columns from the table. Also note that the value of the `[applied]` column is a Boolean `false`.\n\n#### This means that the LWT found a record violating the condition. In this case, it's the row we previously inserted. Rather than upserting the row, the LWT returned the row it read, and noted that the write failed (in the `[applied]` column):\n\n![](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UCLWTFail.png)",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:47:43+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4>Notice that this time the <code>INSERT</code> returns a row that includes the <code>[applied]</code> column along with the other columns from the table. Also note that the value of the <code>[applied]</code> column is a Boolean <code>false</code>.</h4>\n<h4>This means that the LWT found a record violating the condition. In this case, it&rsquo;s the row we previously inserted. Rather than upserting the row, the LWT returned the row it read, and noted that the write failed (in the <code>[applied]</code> column):</h4>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UCLWTFail.png\" alt=\"\" /></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262225_522687967",
      "id": "paragraph_1593613262225_522687967",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "dateStarted": "2020-07-01T14:47:43+0000",
      "dateFinished": "2020-07-01T14:47:43+0000",
      "status": "FINISHED",
      "$$hashKey": "object:126"
    },
    {
      "text": "%md\n\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images//line.png \"line\" )\n# <center><span style=\"color:teal\">`UPDATE` with Lightweight Transactions (LWTs)</span></center>\n\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\n- #### We'll use an `UPDATE` with an LWT that succeeds\n- #### We'll use an `UPDATE` with an LWT that fails\n- #### We'll explain why you care about updates and LWTs\n<br>\n\n#### <b>Here's the story:</b>\n\n#### Sometimes, when you want to update a record, you may run into a similar situation as you did with the insert. For example, let’s say we want to update the password column, but only if the column value has not already been updated. We can use an LWT for this too.\n\n#### First, let’s simulate getting the current password - since that is what your code would have to do.\n<br>\n\n#### <span style=\"color:teal\"><b>Step 1:</b></span> In the cell that follows, write CQL to query for the user you just created\n<br>\n<details>\n\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n\n> #### You are writing a `SELECT` statement to query the `killrvideo.user_credentials` table. Since the primary key is the `email`, you want to search for the email value of `'cv@fenago.com'`.\n</details>\n\n<details>\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n\n```\nSELECT * FROM killrvideo.user_credentials WHERE email = 'cv@fenago.com';\n```\n</details>\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:48:22+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images//line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\"><code>UPDATE</code> with Lightweight Transactions (LWTs)</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>\n<h4>We&rsquo;ll use an <code>UPDATE</code> with an LWT that succeeds</h4>\n</li>\n<li>\n<h4>We&rsquo;ll use an <code>UPDATE</code> with an LWT that fails</h4>\n</li>\n<li>\n<h4>We&rsquo;ll explain why you care about updates and LWTs</h4>\n</li>\n</ul>\n<br>\n<h4><b>Here&rsquo;s the story:</b></h4>\n<h4>Sometimes, when you want to update a record, you may run into a similar situation as you did with the insert. For example, let’s say we want to update the password column, but only if the column value has not already been updated. We can use an LWT for this too.</h4>\n<h4>First, let’s simulate getting the current password - since that is what your code would have to do.</h4>\n<br>\n<h4><span style=\"color:teal\"><b>Step 1:</b></span> In the cell that follows, write CQL to query for the user you just created</h4>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n<blockquote>\n<h4>You are writing a <code>SELECT</code> statement to query the <code>killrvideo.user_credentials</code> table. Since the primary key is the <code>email</code>, you want to search for the email value of <code>'cv@fenago.com'</code>.</h4>\n</blockquote>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n<pre><code>SELECT * FROM killrvideo.user_credentials WHERE email = 'cv@fenago.com';\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262388_141096057",
      "id": "paragraph_1593613262388_141096057",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "dateStarted": "2020-07-01T14:48:17+0000",
      "dateFinished": "2020-07-01T14:48:17+0000",
      "status": "FINISHED",
      "$$hashKey": "object:127"
    },
    {
      "text": "// Enter and execute the query to retrieve the user you created in the previous section\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:34:29+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613261647_-1159850577",
      "id": "paragraph_1593613261647_-1159850577",
      "dateCreated": "2020-07-01T14:21:01+0000",
      "status": "READY",
      "$$hashKey": "object:128"
    },
    {
      "text": "%md\n\n#### Let’s imagine we want to change the password value from `3@$tC0@$tC@ss@ndr@` to `password_A`, but only if nobody has changed the password yet (we realize the security gods would hate you for using this simple password, but let's ignore them for now). We can do that with LWT.\n<br>\n\n#### <span style=\"color:teal\"><b>Step 2:</b></span> In the cell that follows, write an `UPDATE` command to change the user's password from `'3@$tC0@$tC@ss@ndr@'` to `'Password_A'`. Use an LWT to make sure the password wasn't already changed.\n<br>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n\n> #### You are writing an `UPDATE` statement for the `killrvideo.user_credentials` table. Since the primary key is the `email`, you want to update the row with the `email` value of `'cv@fenago.com'`. You will use the LWT with the form `IF password = '3@$tC0@$tC@ss@ndr@'`.\n</details>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n\n```\nUPDATE killrvideo.user_credentials\nSET password = 'password_A'\nWHERE email = 'cv@fenago.com'\nIF password = '3@$tC0@$tC@ss@ndr@';\n```\n</details>\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:49:01+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4>Let’s imagine we want to change the password value from <code>3@$tC0@$tC@ss@ndr@</code> to <code>password_A</code>, but only if nobody has changed the password yet (we realize the security gods would hate you for using this simple password, but let&rsquo;s ignore them for now). We can do that with LWT.</h4>\n<br>\n<h4><span style=\"color:teal\"><b>Step 2:</b></span> In the cell that follows, write an <code>UPDATE</code> command to change the user&rsquo;s password from <code>'3@$tC0@$tC@ss@ndr@'</code> to <code>'Password_A'</code>. Use an LWT to make sure the password wasn&rsquo;t already changed.</h4>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n<blockquote>\n<h4>You are writing an <code>UPDATE</code> statement for the <code>killrvideo.user_credentials</code> table. Since the primary key is the <code>email</code>, you want to update the row with the <code>email</code> value of <code>'cv@fenago.com'</code>. You will use the LWT with the form <code>IF password = '3@$tC0@$tC@ss@ndr@'</code>.</h4>\n</blockquote>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n<pre><code>UPDATE killrvideo.user_credentials\nSET password = 'password_A'\nWHERE email = 'cv@fenago.com'\nIF password = '3@$tC0@$tC@ss@ndr@';\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613261553_1468891853",
      "id": "paragraph_1593613261553_1468891853",
      "dateCreated": "2020-07-01T14:21:01+0000",
      "dateStarted": "2020-07-01T14:49:01+0000",
      "dateFinished": "2020-07-01T14:49:01+0000",
      "status": "FINISHED",
      "$$hashKey": "object:129"
    },
    {
      "text": "// Enter and execute the update with LWT here\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:34:46+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262346_-937530090",
      "id": "paragraph_1593613262346_-937530090",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "READY",
      "$$hashKey": "object:130"
    },
    {
      "text": "%md\n\n#### The LWT checks that the `password` is what we expect. Notice the resulting value in the `[applied]` column is `true`.\n#### What does this mean?\n\n<details>\n<summary><i><span style=\"color:blue\">If you're not sure, click here.</span></i></summary>\n</summary>\n\n#### When an LWT executes and the resulting `[applied]` column is `true`, the LWT succeeded.\n\n#### When the `[applied]` column contains a `false` value, the LWT failed to do the `UPDATE`.\n</details>\n\n<br>\n\n#### Now, let’s simulate updating the password when it is NOT what we think it is.\n<br>\n#### For example, after we read the record to prepare for the `UPDATE`, imagine somebody else changes the password before we can. If we blindly apply our change, we may overwrite the change they applied.\n\n#### <span style=\"color:teal\"><b>Step 3:</b></span> Execute an `UPDATE` in the following cell to simulate this situation (noticing that the record currently contains the password `password_A`). Set the `password` to `'password_B'` if the current password is `'3@$tC0@$tC@ss@ndr@'`.\n\n<br>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n\n> #### Copy the `UPDATE` from the previous step. Then modify the `SET` clause to set the `password` to `password_B`.\n</details>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n\n```\nUPDATE killrvideo.user_credentials\nSET password = 'password_B'\nWHERE email = 'cv@fenago.com'\nIF password = '3@$tC0@$tC@ss@ndr@';\n```\n</details>\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:49:38+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4>The LWT checks that the <code>password</code> is what we expect. Notice the resulting value in the <code>[applied]</code> column is <code>true</code>.</h4>\n<h4>What does this mean?</h4>\n<details>\n<summary><i><span style=\"color:blue\">If you're not sure, click here.</span></i></summary>\n</summary>\n<h4>When an LWT executes and the resulting <code>[applied]</code> column is <code>true</code>, the LWT succeeded.</h4>\n<h4>When the <code>[applied]</code> column contains a <code>false</code> value, the LWT failed to do the <code>UPDATE</code>.</h4>\n</details>\n<br>\n<h4>Now, let’s simulate updating the password when it is NOT what we think it is.</h4>\n<br>\n#### For example, after we read the record to prepare for the `UPDATE`, imagine somebody else changes the password before we can. If we blindly apply our change, we may overwrite the change they applied.\n<h4><span style=\"color:teal\"><b>Step 3:</b></span> Execute an <code>UPDATE</code> in the following cell to simulate this situation (noticing that the record currently contains the password <code>password_A</code>). Set the <code>password</code> to <code>'password_B'</code> if the current password is <code>'3@$tC0@$tC@ss@ndr@'</code>.</h4>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n<blockquote>\n<h4>Copy the <code>UPDATE</code> from the previous step. Then modify the <code>SET</code> clause to set the <code>password</code> to <code>password_B</code>.</h4>\n</blockquote>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n<pre><code>UPDATE killrvideo.user_credentials\nSET password = 'password_B'\nWHERE email = 'cv@fenago.com'\nIF password = '3@$tC0@$tC@ss@ndr@';\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613261345_1732393278",
      "id": "paragraph_1593613261345_1732393278",
      "dateCreated": "2020-07-01T14:21:01+0000",
      "dateStarted": "2020-07-01T14:49:38+0000",
      "dateFinished": "2020-07-01T14:49:38+0000",
      "status": "FINISHED",
      "$$hashKey": "object:131"
    },
    {
      "text": "// Enter and execute the update with LWT here\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:34:57+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260904_-1647256796",
      "id": "paragraph_1593613260904_-1647256796",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:132"
    },
    {
      "text": "%md\n\n#### Of course, the LWT failed (as indicated by the `false` value in the `[applied]` column). Do you understand why?\n\n<details>\n<summary><i><span style=\"color:blue\">If you're not sure, click here.</span></i></summary>\n\n</summary>\n\n> The LWT attempts to `UPDATE` the row if and only if the current `password` value is `3@$tC0@$tC@ss@ndr@`.\n> The row's `password` value is `password_A`.\n> So, when the LWT reads the record and sees that the `password` value is not the specified value (i.e. `3@$tC0@$tC@ss@ndr@`), the LWT fails the `UPDATE`.\n</details>\n\n<br>\n\n#### Just to make sure we understand, let's select the row and verify the values of its columns.\n<br>\n\n#### <span style=\"color:teal\"><b>Step 4:</b></span> Write a `SELECT` statement to retrieve the updated row and execute it in the following CQL cell:\n\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n\n> #### Retrieve the row from `killrvideo.user_credentails` where the `email` is `cv@fenago.com`.\n</details>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n\n```\nSELECT * FROM killrvideo.user_credentials WHERE email = 'cv@fenago.com';\n```\n</details>",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:50:22+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4>Of course, the LWT failed (as indicated by the <code>false</code> value in the <code>[applied]</code> column). Do you understand why?</h4>\n<details>\n<summary><i><span style=\"color:blue\">If you're not sure, click here.</span></i></summary>\n</summary>\n<blockquote>\n<p>The LWT attempts to <code>UPDATE</code> the row if and only if the current <code>password</code> value is <code>3@$tC0@$tC@ss@ndr@</code>.<br />\nThe row&rsquo;s <code>password</code> value is <code>password_A</code>.<br />\nSo, when the LWT reads the record and sees that the <code>password</code> value is not the specified value (i.e. <code>3@$tC0@$tC@ss@ndr@</code>), the LWT fails the <code>UPDATE</code>.</p>\n</blockquote>\n</details>\n<br>\n<h4>Just to make sure we understand, let&rsquo;s select the row and verify the values of its columns.</h4>\n<br>\n<h4><span style=\"color:teal\"><b>Step 4:</b></span> Write a <code>SELECT</code> statement to retrieve the updated row and execute it in the following CQL cell:</h4>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n<blockquote>\n<h4>Retrieve the row from <code>killrvideo.user_credentails</code> where the <code>email</code> is <code>cv@fenago.com</code>.</h4>\n</blockquote>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n<pre><code>SELECT * FROM killrvideo.user_credentials WHERE email = 'cv@fenago.com';\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262465_1302545411",
      "id": "paragraph_1593613262465_1302545411",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "dateStarted": "2020-07-01T14:50:10+0000",
      "dateFinished": "2020-07-01T14:50:10+0000",
      "status": "FINISHED",
      "$$hashKey": "object:133"
    },
    {
      "text": "// Enter and execute the select statement here\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:35:09+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262305_182239066",
      "id": "paragraph_1593613262305_182239066",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "READY",
      "$$hashKey": "object:134"
    },
    {
      "text": "%md\n\n![line](https://s3.amazonaws.com/datastaxtraining/CaaS/line.png \"line\" )\n# <center><span style=\"color:teal\">Batches</span></center>\n\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\n- #### We'll explore the batch concept and understand when to use it\n- #### We'll use a `BATCH` command to insert rows in each of two denormalized tables\n\n**Note:** The keyword `BATCH` has a completely different meaning in CQL than SQL. Please be careful not to confuse the two.\n\n<br>\n<b>Here's the story:</b>\n\nAs we have seen in Cassandra, we denormalize data so that we can build tables for fast, scalable access. By definition, denormalization requires that we insert redundant data into two or more tables. This can cause problems. Imagine two writes to two denormalized tables. If one write succeeds and the other, for reasons unknown, fails, the tables are permanently inconsistent. Batches help us solve this problem by making sure that the data gets written to both tables.\n\nBatches sound a little like traditional transactions, and in some ways, they are. Traditional transactions will commit to both writes or, if one write fails, it rolls back the successful write. Alternatively, batches just keep trying until both writes succeed.\n<br>\n\nTwo KillrVideo tables that contain denormalized data are the `users` table and the `users_credentials table`. In the previous section, we only wrote to the `user_credentials` table, so our tables are now out of sync. Let's fix that! We'll start by deleting the row we inserted in the previous sections, and then we'll add it back in to both tables using batches.\n<br>\n<span style=\"color:teal\"><b>Step 1:</b></span> In the following cell, delete the row with the `email` of `cv@fenago.com` from the `user_credentials` table.\n\n<br>\n<details>\n\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n\nYou will use the `DELETE` command on the `killrvideo.user_credentials` table. Since we want to delete all columns in the row, leave the column specification clause empty. In the `WHERE` clause, be sure to specify the `email` as `cv@fenago.com`\n</details>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n\n```\nDELETE FROM killrvideo.user_credentials WHERE email = 'cv@fenago.com';\n```\n\n</details>",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:06:59+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260866_-1101222115",
      "id": "paragraph_1593613260866_-1101222115",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:135",
      "dateFinished": "2020-07-02T07:06:59+0000",
      "dateStarted": "2020-07-02T07:06:59+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://s3.amazonaws.com/datastaxtraining/CaaS/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">Batches</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>\n<h4>We&rsquo;ll explore the batch concept and understand when to use it</h4>\n</li>\n<li>\n<h4>We&rsquo;ll use a <code>BATCH</code> command to insert rows in each of two denormalized tables</h4>\n</li>\n</ul>\n<p><strong>Note:</strong> The keyword <code>BATCH</code> has a completely different meaning in CQL than SQL. Please be careful not to confuse the two.</p>\n<br>\n<b>Here's the story:</b>\n<p>As we have seen in Cassandra, we denormalize data so that we can build tables for fast, scalable access. By definition, denormalization requires that we insert redundant data into two or more tables. This can cause problems. Imagine two writes to two denormalized tables. If one write succeeds and the other, for reasons unknown, fails, the tables are permanently inconsistent. Batches help us solve this problem by making sure that the data gets written to both tables.</p>\n<p>Batches sound a little like traditional transactions, and in some ways, they are. Traditional transactions will commit to both writes or, if one write fails, it rolls back the successful write. Alternatively, batches just keep trying until both writes succeed.<br />\n<br></p>\n<p>Two KillrVideo tables that contain denormalized data are the <code>users</code> table and the <code>users_credentials table</code>. In the previous section, we only wrote to the <code>user_credentials</code> table, so our tables are now out of sync. Let&rsquo;s fix that! We&rsquo;ll start by deleting the row we inserted in the previous sections, and then we&rsquo;ll add it back in to both tables using batches.<br />\n<br><br />\n<span style=\"color:teal\"><b>Step 1:</b></span> In the following cell, delete the row with the <code>email</code> of <code>cv@fenago.com</code> from the <code>user_credentials</code> table.</p>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n<p>You will use the <code>DELETE</code> command on the <code>killrvideo.user_credentials</code> table. Since we want to delete all columns in the row, leave the column specification clause empty. In the <code>WHERE</code> clause, be sure to specify the <code>email</code> as <code>cv@fenago.com</code></p>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Just want the command? Click here.</span></i></summary>\n<pre><code>DELETE FROM killrvideo.user_credentials WHERE email = 'cv@fenago.com';\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "// Enter and execute the delete command here\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:35:27+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262446_343939607",
      "id": "paragraph_1593613262446_343939607",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "READY",
      "$$hashKey": "object:136"
    },
    {
      "text": "%md\n\n#### Let's review the contents of both the `users` table and the `user_credentials` table.\n<br>\n<span style=\"color:teal\"><b>Step 2:</b></span> Execute the next two cells to view the contents of both tables.",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:12:06+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262406_-11442358",
      "id": "paragraph_1593613262406_-11442358",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "FINISHED",
      "$$hashKey": "object:137",
      "dateFinished": "2020-07-02T07:07:16+0000",
      "dateStarted": "2020-07-02T07:07:16+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4>Let&rsquo;s review the contents of both the <code>users</code> table and the <code>user_credentials</code> table.</h4>\n<br>\n<span style=\"color:teal\"><b>Step 2:</b></span> Execute the next two cells to view the contents of both tables.\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "// This command will let you review the contents of the user_credentials table.\n// This command requires a full table scan, which means it's fine on small tables like this on, but will not be performant for large production tables.\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n\nSELECT * FROM killrvideo.user_credentials;\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:12:06+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262285_1544176791",
      "id": "paragraph_1593613262285_1544176791",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "READY",
      "$$hashKey": "object:138"
    },
    {
      "text": "// This command will let you review the contents of the users table.\n// This command requires a full table scan, which means it's fine on small tables like this on, but will not be performant for large production tables.\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n\nSELECT * FROM killrvideo.users;\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:07:26+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262253_-799265529",
      "id": "paragraph_1593613262253_-799265529",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "READY",
      "$$hashKey": "object:139"
    },
    {
      "text": "%md\r\n\r\n#### Note two points about these tables:\r\n- #### The contents of the tables are consistent - the redundant data is identical in both tables\r\n- #### Cristina's data does not show up in either table\r\n\r\n<br>\r\nLet's add a row to each table for Cristina. The following table gives you her data:\r\n<h4><center>\r\n\r\n <table style=\"width:40%\" border=\"1\">\r\n  <tr style=\"background-color:blue;color:white\">\r\n    <th>Column Name</th>\r\n    <th>Value</th>\r\n  </tr>\r\n  <tr style=\"background-color:white\">\r\n    <td>firstname</td>\r\n    <td>'Cristina'</td>\r\n  </tr>\r\n  <tr style=\"background-color:lightgray\">\r\n    <td>lastname</td>\r\n    <td>'Veale'</td>\r\n  </tr>\r\n  <tr style=\"background-color:white\">\r\n    <td>email</td>\r\n    <td>'cv@fenago.com`</td>\r\n  </tr>\r\n  <tr style=\"background-color:lightgray\">\r\n    <td>password</td>\r\n    <td>'3@$tC0@$tC@ss@ndr@'</td>\r\n  </tr>\r\n  <tr style=\"background-color:white\">\r\n    <td>userid</td>\r\n    <td>55555555-5555-5555-5555-555555555555</td>\r\n  </tr>\r\n </table>\r\n</center></h4>\r\n\r\n<br>\r\n<span style=\"color:teal\"><b>Step 3:</b></span> In the following cell, write and execute the CQL to insert a row into each table. Use a batch to make sure the code updates both tables.\r\n\r\n<br>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\r\n\r\n> #### You will write two `INSERT` statements and surround them with `BEGIN BATCH`/`APPLY BATCH`. One of the `INSERT` statements should create a row in the `users` table and the other `INSERT` statement should create a row in the `user_credentials` table. Use the table above for the values of each insert. Also, don't forget to use `toTimestamp(now())` as the value for the `created_date` column.\r\n</details>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Just want the CQL? Click here.</span></i></summary>\r\n\r\n```\r\nBEGIN BATCH\r\nINSERT INTO killrvideo.user_credentials (email, password, userid)\r\n  VALUES('cv@fenago.com', '3@$tC0@$tC@ss@ndr@', 55555555-5555-5555-5555-555555555555);\r\nINSERT INTO killrvideo.users (userid, created_date, firstname, lastname, email)\r\n  VALUES(55555555-5555-5555-5555-555555555555, toTimestamp(now()), 'Cristina', 'Veale', 'cv@fenago.com');\r\nAPPLY BATCH\r\n```\r\n\r\n</details>",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:51:41+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4>Note two points about these tables:</h4>\n<ul>\n<li>\n<h4>The contents of the tables are consistent - the redundant data is identical in both tables</h4>\n</li>\n<li>\n<h4>Cristina&rsquo;s data does not show up in either table</h4>\n</li>\n</ul>\n<br>\nLet's add a row to each table for Cristina. The following table gives you her data:\n<h4><center>\n <table style=\"width:40%\" border=\"1\">\n  <tr style=\"background-color:blue;color:white\">\n    <th>Column Name</th>\n    <th>Value</th>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>firstname</td>\n    <td>'Cristina'</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>lastname</td>\n    <td>'Veale'</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>email</td>\n    <td>'cv@fenago.com`</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>password</td>\n    <td>'3@$tC0@$tC@ss@ndr@'</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>userid</td>\n    <td>55555555-5555-5555-5555-555555555555</td>\n  </tr>\n </table>\n</center></h4>\n<br>\n<span style=\"color:teal\"><b>Step 3:</b></span> In the following cell, write and execute the CQL to insert a row into each table. Use a batch to make sure the code updates both tables.\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\n<blockquote>\n<h4>You will write two <code>INSERT</code> statements and surround them with <code>BEGIN BATCH</code>/<code>APPLY BATCH</code>. One of the <code>INSERT</code> statements should create a row in the <code>users</code> table and the other <code>INSERT</code> statement should create a row in the <code>user_credentials</code> table. Use the table above for the values of each insert. Also, don&rsquo;t forget to use <code>toTimestamp(now())</code> as the value for the <code>created_date</code> column.</h4>\n</blockquote>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Just want the CQL? Click here.</span></i></summary>\n<pre><code>BEGIN BATCH\nINSERT INTO killrvideo.user_credentials (email, password, userid)\n  VALUES('cv@fenago.com', '3@$tC0@$tC@ss@ndr@', 55555555-5555-5555-5555-555555555555);\nINSERT INTO killrvideo.users (userid, created_date, firstname, lastname, email)\n  VALUES(55555555-5555-5555-5555-555555555555, toTimestamp(now()), 'Cristina', 'Veale', 'cv@fenago.com');\nAPPLY BATCH\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260826_-920837694",
      "id": "paragraph_1593613260826_-920837694",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "dateStarted": "2020-07-01T14:51:41+0000",
      "dateFinished": "2020-07-01T14:51:41+0000",
      "status": "FINISHED",
      "$$hashKey": "object:140"
    },
    {
      "user": "anonymous",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593615061042_-1988234466",
      "id": "paragraph_1593615061042_-1988234466",
      "dateCreated": "2020-07-01T14:51:01+0000",
      "status": "READY",
      "$$hashKey": "object:141"
    },
    {
      "text": "// Write and execute the batch with the two inserts here\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:35:57+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260786_-103737537",
      "id": "paragraph_1593613260786_-103737537",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:142"
    },
    {
      "text": "%md\n\nFinally, let's review the contents of both the `users` table and the `user_credentials` table and verify the changes\n\n<span style=\"color:teal\"><b>Step 4:</b></span> Execute the next two cells to view the contents of both tables.",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:11:55+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262166_589224863",
      "id": "paragraph_1593613262166_589224863",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "FINISHED",
      "$$hashKey": "object:143",
      "dateFinished": "2020-07-02T07:11:55+0000",
      "dateStarted": "2020-07-02T07:11:55+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Finally, let&rsquo;s review the contents of both the <code>users</code> table and the <code>user_credentials</code> table and verify the changes</p>\n<p><span style=\"color:teal\"><b>Step 4:</b></span> Execute the next two cells to view the contents of both tables.</p>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "\n// This command will let you review the contents of the users table.\n// This command requires a full table scan, which means it's fine on small tables like this on, but will not be performant for large production tables.\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \nSELECT * FROM killrvideo.users;\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:11:47+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260765_-928681310",
      "id": "paragraph_1593613260765_-928681310",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:144"
    },
    {
      "text": "\n// This command will let you review the contents of the user_credentials table.\n// This command requires a full table scan, which means it's fine on small tables like this on, but will not be performant for large production tables.\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \nSELECT * FROM killrvideo.user_credentials;\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:11:51+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260731_1055227562",
      "id": "paragraph_1593613260731_1055227562",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:145"
    },
    {
      "text": "%md\n\nReview the results in the previous two cells. If you carefully compare them with results from Step 2, you should find the row in each table containing Cristina's data.",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:11:52+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613262105_1147790105",
      "id": "paragraph_1593613262105_1147790105",
      "dateCreated": "2020-07-01T14:21:02+0000",
      "status": "FINISHED",
      "$$hashKey": "object:146",
      "dateFinished": "2020-07-02T07:11:51+0000",
      "dateStarted": "2020-07-02T07:11:51+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>Review the results in the previous two cells. If you carefully compare them with results from Step 2, you should find the row in each table containing Cristina&rsquo;s data.</p>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "%md\n\n![line](https://s3.amazonaws.com/datastaxtraining/CaaS/line.png \"line\" )\n# <center><span style=\"color:teal\">Congratulations!!!!</span></center>\n\n<p><h4>At this point you understand some of the advanced concepts of Cassandra.</h4></p>\n\n<br>\nYou are like some kind of an Apache Cassandra PhD!\n\n<details>\n<summary><i><span style=\"color:blue\">Want to feel the graduating experience? Click here.</span></i></summary>\n<div class=\"solution-wrapper\">\n\n<div class=\"solution-content\">\n<center><div class=\"align-center\"><img alt=\"Dance off!\" src=\"http://giphygifs.s3.amazonaws.com/media/BfcNk5h20pdte/giphy.gif\"></div></center>\n</div>\n</div>\n</details>\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:11:18+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260713_789012323",
      "id": "paragraph_1593613260713_789012323",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:147",
      "dateFinished": "2020-07-02T07:11:18+0000",
      "dateStarted": "2020-07-02T07:11:18+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://s3.amazonaws.com/datastaxtraining/CaaS/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">Congratulations!!!!</span></center></h1>\n<p><h4>At this point you understand some of the advanced concepts of Cassandra.</h4></p>\n<br>\nYou are like some kind of an Apache Cassandra PhD!\n<details>\n<summary><i><span style=\"color:blue\">Want to feel the graduating experience? Click here.</span></i></summary>\n<div class=\"solution-wrapper\">\n<div class=\"solution-content\">\n<center><div class=\"align-center\"><img alt=\"Dance off!\" src=\"http://giphygifs.s3.amazonaws.com/media/BfcNk5h20pdte/giphy.gif\"></div></center>\n</div>\n</div>\n</details>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "%md\n\n![line](https://s3.amazonaws.com/datastaxtraining/CaaS/line.png \"line\" )\n# <center><span style=\"color:teal\">Bonus Challenge: Using TTL</span></center>\n### <center>If you got done early and want something to do while you wait for others, here's a bonus challenge</center>\n\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\n- #### Create a table to keep track of video positions for each user\n- #### We will cause entries in the new table to expire after a period of time using TTL\n\n\n#### **Here's the pitch:**\n#### Imagine while a user is playing a video, they decide to pause it. Further, we want to keep track of where they paused so we can restart the video at that point. However, we don't want to keep track of every time every user pauses a video forever. This information is probably only useful for a limited period of time, so after that period we would like the data to just go away.\n#### This is where Time To Live (TTL) comes in. We can set a value (in seconds) for how long a column value should exist. After that amount of time passes, Cassandra automatically removed the value from that column. Let's see how it works...\n\n<br>\n <span style=\"color:teal\"><b>Step 1:</b></span> In the next cell, write and execute the CQL to create a table named `video_positions_by_user`.\n \n- Make the `userid` the primary key\n- Include the following columns in the table\n\n<h4><center>\n <table style=\"width:25%\" border=\"1\">\n  <tr style=\"background-color:blue;color:white\">\n    <th>Column Name</th>\n    <th>Data Type</th>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>userid</td>\n    <td>UUID</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>videoid</td>\n    <td>UUID</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>video_position</td>\n    <td>INT</td>\n  </tr>\n</table>\n</center></h4>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Want the solution? Click here.</span></i></summary>\n```\n\nCREATE TABLE killrvideo.video_positions_by_user (\n    userid          UUID,\n    videoid         UUID,\n    video_position  INT,\n    PRIMARY KEY (userid)\n);\n```\n\n</details>\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:11:01+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260663_142404105",
      "id": "paragraph_1593613260663_142404105",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:148",
      "dateFinished": "2020-07-02T07:10:56+0000",
      "dateStarted": "2020-07-02T07:10:56+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://s3.amazonaws.com/datastaxtraining/CaaS/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">Bonus Challenge: Using TTL</span></center></h1>\n<h3><center>If you got done early and want something to do while you wait for others, here&rsquo;s a bonus challenge</center></h3>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>\n<h4>Create a table to keep track of video positions for each user</h4>\n</li>\n<li>\n<h4>We will cause entries in the new table to expire after a period of time using TTL</h4>\n</li>\n</ul>\n<h4><strong>Here&rsquo;s the pitch:</strong></h4>\n<h4>Imagine while a user is playing a video, they decide to pause it. Further, we want to keep track of where they paused so we can restart the video at that point. However, we don&rsquo;t want to keep track of every time every user pauses a video forever. This information is probably only useful for a limited period of time, so after that period we would like the data to just go away.</h4>\n<h4>This is where Time To Live (TTL) comes in. We can set a value (in seconds) for how long a column value should exist. After that amount of time passes, Cassandra automatically removed the value from that column. Let&rsquo;s see how it works&hellip;</h4>\n<br>\n <span style=\"color:teal\"><b>Step 1:</b></span> In the next cell, write and execute the CQL to create a table named `video_positions_by_user`.\n<ul>\n<li>Make the <code>userid</code> the primary key</li>\n<li>Include the following columns in the table</li>\n</ul>\n<h4><center>\n <table style=\"width:25%\" border=\"1\">\n  <tr style=\"background-color:blue;color:white\">\n    <th>Column Name</th>\n    <th>Data Type</th>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>userid</td>\n    <td>UUID</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>videoid</td>\n    <td>UUID</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>video_position</td>\n    <td>INT</td>\n  </tr>\n</table>\n</center></h4>\n<details>\n<summary><i><span style=\"color:blue\">Want the solution? Click here.</span></i></summary>\n```\n<p>CREATE TABLE killrvideo.video_positions_by_user (<br />\nuserid          UUID,<br />\nvideoid         UUID,<br />\nvideo_position  INT,<br />\nPRIMARY KEY (userid)<br />\n);</p>\n<pre><code>\n&lt;/details&gt;</code></pre>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "// Write and execute the CQL to create the video_positions_by_user table\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:37:11+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260626_-1206190066",
      "id": "paragraph_1593613260626_-1206190066",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:149"
    },
    {
      "text": "%md\n\n<span style=\"color:teal\"><b>Step 2:</b></span> In the following cell, insert a row into the `video_positions_by_user` table using TTL.\n- #### Set the TTL on the `videoid` and `video_position` values to five minutes (300 seconds) with the clause `USING TTL 300` at the end of the statement\n- #### Use the values in the following table\n\n<h4><center>\n <table style=\"width:40%\" border=\"1\">\n  <tr style=\"background-color:blue;color:white\">\n    <th>Column Name</th>\n    <th>Column Value</th>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>userid</td>\n    <td>11111111-1111-1111-1111-111111111111</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>videoid</td>\n    <td>aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>video_position</td>\n    <td>42</td>\n  </tr>\n</table>\n</center></h4>\n\n**Note:** Once you execute the `INSERT` command, proceed directly to the next step. You will want to execute the next step within the TTL window. Time is ticking...\n\n<details>\n\n<summary><i><span style=\"color:blue\">Want the solution? Click here.</span></i></summary>\n```\n\nINSERT INTO killrvideo.video_positions_by_user\n    (userid, videoid, video_position)\n    VALUES(11111111-1111-1111-1111-111111111111, aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa, 42)\n    USING TTL 300;\n```\n\n</details>\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:09:59+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260605_1452046991",
      "id": "paragraph_1593613260605_1452046991",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:150",
      "dateFinished": "2020-07-02T07:09:58+0000",
      "dateStarted": "2020-07-02T07:09:58+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><span style=\"color:teal\"><b>Step 2:</b></span> In the following cell, insert a row into the <code>video_positions_by_user</code> table using TTL.</p>\n<ul>\n<li>\n<h4>Set the TTL on the <code>videoid</code> and <code>video_position</code> values to five minutes (300 seconds) with the clause <code>USING TTL 300</code> at the end of the statement</h4>\n</li>\n<li>\n<h4>Use the values in the following table</h4>\n</li>\n</ul>\n<h4><center>\n <table style=\"width:40%\" border=\"1\">\n  <tr style=\"background-color:blue;color:white\">\n    <th>Column Name</th>\n    <th>Column Value</th>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>userid</td>\n    <td>11111111-1111-1111-1111-111111111111</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>videoid</td>\n    <td>aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>video_position</td>\n    <td>42</td>\n  </tr>\n</table>\n</center></h4>\n<p><strong>Note:</strong> Once you execute the <code>INSERT</code> command, proceed directly to the next step. You will want to execute the next step within the TTL window. Time is ticking&hellip;</p>\n<details>\n<summary><i><span style=\"color:blue\">Want the solution? Click here.</span></i></summary>\n```\n<p>INSERT INTO killrvideo.video_positions_by_user<br />\n(userid, videoid, video_position)<br />\nVALUES(11111111-1111-1111-1111-111111111111, aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa, 42)<br />\nUSING TTL 300;</p>\n<pre><code>\n&lt;/details&gt;</code></pre>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "// Write and execute the CQL to insert the row into video_positions_by_user table with the TTL of 180\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:37:20+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260567_1827104339",
      "id": "paragraph_1593613260567_1827104339",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:151"
    },
    {
      "text": "%md\n\n<span style=\"color:teal\"><b>Step 3:</b></span> Inspect how much time is left for the row's values.\n- Execute the following cell to see how much time is left on the TTL for the `videoid` value\n- You may want to execute the next cell several times and watch the TTL value count down\n- In fact, continue to execute this query every few seconds until the TTL expires (just to see what happens)\n- Notice that Cassandra associates TTL values with column values (not the row), so the query selects the TTL for a specific column\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:09:38+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260546_2132917245",
      "id": "paragraph_1593613260546_2132917245",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:152",
      "dateFinished": "2020-07-02T07:09:36+0000",
      "dateStarted": "2020-07-02T07:09:36+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><span style=\"color:teal\"><b>Step 3:</b></span> Inspect how much time is left for the row&rsquo;s values.</p>\n<ul>\n<li>Execute the following cell to see how much time is left on the TTL for the <code>videoid</code> value</li>\n<li>You may want to execute the next cell several times and watch the TTL value count down</li>\n<li>In fact, continue to execute this query every few seconds until the TTL expires (just to see what happens)</li>\n<li>Notice that Cassandra associates TTL values with column values (not the row), so the query selects the TTL for a specific column</li>\n</ul>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "// Execute this cell to see how much time is left on the TTL for the videoid value\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \nSELECT videoid, TTL(videoid) FROM killrvideo.video_positions_by_user WHERE userid = 11111111-1111-1111-1111-111111111111;",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:37:29+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260505_1498464974",
      "id": "paragraph_1593613260505_1498464974",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:153"
    },
    {
      "text": "%md\n\n#### As we mentioned, Cassandra associates the TTL with a value in the row. This implies we could set different TTLs for different columns. How might we do that? Glad you asked...\n\n<span style=\"color:teal\"><b>Step 4:</b></span> In the following cell, insert the same row again into the `video_positions_by_user` table using TTL.\n- #### Again, set the TTL for to 300 seconds with the clause `USING TTL 300` at the end of the statement\n- #### Here is the table again for your reference\n\n<h4><center>\n <table style=\"width:40%\" border=\"1\">\n  <tr style=\"background-color:blue;color:white\">\n    <th>Column Name</th>\n    <th>Column Value</th>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>userid</td>\n    <td>11111111-1111-1111-1111-111111111111</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>videoid</td>\n    <td>aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>video_position</td>\n    <td>42</td>\n  </tr>\n</table>\n</center></h4>\n\n<details>\n\n<summary><i><span style=\"color:blue\">Want the solution? Click here.</span></i></summary>\n\n```\n\nINSERT INTO killrvideo.video_positions_by_user\n    (userid, videoid, video_position)\n    VALUES(11111111-1111-1111-1111-111111111111, aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa, 42)\n    USING TTL 300;\n```\n\n</details>\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:09:08+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260466_-1047193209",
      "id": "paragraph_1593613260466_-1047193209",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:154",
      "dateFinished": "2020-07-02T07:09:08+0000",
      "dateStarted": "2020-07-02T07:09:08+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4>As we mentioned, Cassandra associates the TTL with a value in the row. This implies we could set different TTLs for different columns. How might we do that? Glad you asked&hellip;</h4>\n<p><span style=\"color:teal\"><b>Step 4:</b></span> In the following cell, insert the same row again into the <code>video_positions_by_user</code> table using TTL.</p>\n<ul>\n<li>\n<h4>Again, set the TTL for to 300 seconds with the clause <code>USING TTL 300</code> at the end of the statement</h4>\n</li>\n<li>\n<h4>Here is the table again for your reference</h4>\n</li>\n</ul>\n<h4><center>\n <table style=\"width:40%\" border=\"1\">\n  <tr style=\"background-color:blue;color:white\">\n    <th>Column Name</th>\n    <th>Column Value</th>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>userid</td>\n    <td>11111111-1111-1111-1111-111111111111</td>\n  </tr>\n  <tr style=\"background-color:lightgray\">\n    <td>videoid</td>\n    <td>aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa</td>\n  </tr>\n  <tr style=\"background-color:white\">\n    <td>video_position</td>\n    <td>42</td>\n  </tr>\n</table>\n</center></h4>\n<details>\n<summary><i><span style=\"color:blue\">Want the solution? Click here.</span></i></summary>\n<pre><code>\nINSERT INTO killrvideo.video_positions_by_user\n    (userid, videoid, video_position)\n    VALUES(11111111-1111-1111-1111-111111111111, aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa, 42)\n    USING TTL 300;\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "// Write and execute the CQL to insert the row into video_positions_by_user table with the TTL of 180\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n",
      "user": "anonymous",
      "dateUpdated": "2020-07-01T14:37:40+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260454_-366961449",
      "id": "paragraph_1593613260454_-366961449",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:155"
    },
    {
      "text": "%md\n<span style=\"color:teal\"><b>Step 5:</b></span> Execute the following cell to reset the value of the TTL for _only_ the videoid value.\n\n**Note:** You may only set TTLs for values of non-primary key columns.\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:08:44+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260406_-1111011670",
      "id": "paragraph_1593613260406_-1111011670",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:156",
      "dateFinished": "2020-07-02T07:08:42+0000",
      "dateStarted": "2020-07-02T07:08:42+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><span style=\"color:teal\"><b>Step 5:</b></span> Execute the following cell to reset the value of the TTL for <em>only</em> the videoid value.</p>\n<p><strong>Note:</strong> You may only set TTLs for values of non-primary key columns.</p>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "\n// Execute this cell to see how much time is left on the TTL for the videoid value\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n\nUPDATE killrvideo.video_positions_by_user\n    USING TTL 300\n    SET videoid = aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\n    WHERE userid = 11111111-1111-1111-1111-111111111111;",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:08:39+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260366_-1925076724",
      "id": "paragraph_1593613260366_-1925076724",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:157"
    },
    {
      "text": "%md\n\n<span style=\"color:teal\"><b>Step 6:</b></span> Execute the following cell repeatedly to watch the TTLs count down.\n- #### Continue to execute the next cell until both TTLs expire\n- #### We know, the suspense is killing you...\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:08:22+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260327_-1478360293",
      "id": "paragraph_1593613260327_-1478360293",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "FINISHED",
      "$$hashKey": "object:158",
      "dateFinished": "2020-07-02T07:08:22+0000",
      "dateStarted": "2020-07-02T07:08:22+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><span style=\"color:teal\"><b>Step 6:</b></span> Execute the following cell repeatedly to watch the TTLs count down.</p>\n<ul>\n<li>\n<h4>Continue to execute the next cell until both TTLs expire</h4>\n</li>\n<li>\n<h4>We know, the suspense is killing you&hellip;</h4>\n</li>\n</ul>\n\n</div>"
          }
        ]
      }
    },
    {
      "text": "// Execute this cell to see how much time is left on the TTL for both of the row's values\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner \n\nSELECT videoid, TTL(videoid), video_position, TTL(video_position) FROM killrvideo.video_positions_by_user WHERE userid = 11111111-1111-1111-1111-111111111111;\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-02T07:08:22+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613260325_-1060122668",
      "id": "paragraph_1593613260325_-1060122668",
      "dateCreated": "2020-07-01T14:21:00+0000",
      "status": "READY",
      "$$hashKey": "object:159"
    },
    {
      "user": "anonymous",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1593613259814_1472969674",
      "id": "paragraph_1593613259814_1472969674",
      "dateCreated": "2020-07-01T14:20:59+0000",
      "status": "READY",
      "$$hashKey": "object:160"
    }
  ],
  "name": "6_Advanced_Topics",
  "id": "2FE4848HB",
  "defaultInterpreterGroup": "cassandra",
  "version": "0.9.0-preview1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/6_Advanced_Topics"
}