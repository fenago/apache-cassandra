{
  "paragraphs": [
    {
      "text": "# -*- coding: utf-8 -*-\r\n# program: lab06_001.py\r\n\r\n## import Cassandra driver library\r\nfrom cassandra.cluster import Cluster\r\n\r\n## function to create watchlist\r\ndef create_watchlist(ss):\r\n    ## create watchlist table if not exists\r\n    ss.execute('CREATE TABLE IF NOT EXISTS watchlist (' + \\\r\n               'watch_list_code varchar,' + \\\r\n               'symbol varchar,' + \\\r\n               'PRIMARY KEY (watch_list_code, symbol))')\r\n    \r\n    ## insert AAPL, AMZN, and GS into watchlist\r\n    ss.execute(\"INSERT INTO watchlist (watch_list_code, \" + \\\r\n               \"symbol) VALUES ('WS01', 'AAPL')\")\r\n    ss.execute(\"INSERT INTO watchlist (watch_list_code, \" + \\\r\n               \"symbol) VALUES ('WS01', 'AMZN')\")\r\n    ss.execute(\"INSERT INTO watchlist (watch_list_code, \" + \\\r\n               \"symbol) VALUES ('WS01', 'GS')\")\r\n\r\n## create Cassandra instance\r\ncluster = Cluster()\r\n\r\n## establish Cassandra connection, using local default\r\nsession = cluster.connect()\r\n\r\n## use fenagocdma keyspace\r\nsession.set_keyspace('fenagocdma')\r\n\r\n## create watchlist table\r\ncreate_watchlist(session)\r\n\r\n## close Cassandra connection\r\ncluster.shutdown()\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-18T13:47:31+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1589809552313_729213886",
      "id": "paragraph_1589809552313_729213886",
      "dateCreated": "2020-05-18T13:45:52+0000",
      "dateStarted": "2020-05-18T13:47:31+0000",
      "dateFinished": "2020-05-18T13:47:31+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:5963"
    },
    {
      "text": "# -*- coding: utf-8 -*-\r\n# program: lab06_002.py\r\n\r\n## import Cassandra driver library\r\nfrom cassandra.cluster import Cluster\r\n\r\n## function to create alertlist\r\ndef create_alertlist(ss):\r\n    ## execute CQL statement to create alertlist table if not exists\r\n    ss.execute('CREATE TABLE IF NOT EXISTS alertlist (' + \\\r\n               'symbol varchar,' + \\\r\n               'price_time timestamp,' + \\\r\n               'stock_name varchar,' + \\\r\n               'signal_price float,' + \\\r\n               'PRIMARY KEY (symbol, price_time))')\r\n\r\n## create Cassandra instance\r\ncluster = Cluster()\r\n\r\n## establish Cassandra connection, using local default\r\nsession = cluster.connect()\r\n\r\n## use fenagocdma keyspace\r\nsession.set_keyspace('fenagocdma')\r\n\r\n## create alertlist table\r\ncreate_alertlist(session)\r\n\r\n## close Cassandra connection\r\ncluster.shutdown()\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-18T13:47:37+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1589809651074_-1497851852",
      "id": "paragraph_1589809651074_-1497851852",
      "dateCreated": "2020-05-18T13:47:31+0000",
      "dateStarted": "2020-05-18T13:47:37+0000",
      "dateFinished": "2020-05-18T13:47:37+0000",
      "status": "FINISHED",
      "$$hashKey": "object:5964"
    },
    {
      "text": "# -*- coding: utf-8 -*-\r\n# program: lab06_003.py\r\n\r\n## import Cassandra driver library\r\nfrom cassandra.cluster import Cluster\r\n\r\n## function to add stock_name column\r\ndef add_stockname_to_quote(ss):\r\n    ## add stock_name to quote\r\n    ss.execute('ALTER TABLE quote ' + \\\r\n               'ADD stock_name varchar')\r\n\r\n## create Cassandra instance\r\ncluster = Cluster()\r\n\r\n## establish Cassandra connection, using local default\r\nsession = cluster.connect()\r\n\r\n## use fenagocdma keyspace\r\nsession.set_keyspace('fenagocdma')\r\n\r\n## add stock_name column\r\nadd_stockname_to_quote(session)\r\n\r\n## close Cassandra connection\r\ncluster.shutdown()\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-18T13:47:45+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1589809657337_1884058497",
      "id": "paragraph_1589809657337_1884058497",
      "dateCreated": "2020-05-18T13:47:37+0000",
      "dateStarted": "2020-05-18T13:47:45+0000",
      "dateFinished": "2020-05-18T13:47:46+0000",
      "status": "FINISHED",
      "$$hashKey": "object:5965"
    },
    {
      "text": "# -*- coding: utf-8 -*-\r\n# program: lab06_004.py\r\n\r\n## import Cassandra driver library\r\nfrom cassandra.cluster import Cluster\r\n\r\n## function to create alert_by_date table\r\ndef create_alertbydate(ss):\r\n    ## create alert_by_date table if not exists\r\n    ss.execute('CREATE TABLE IF NOT EXISTS alert_by_date (' + \\\r\n               'symbol varchar,' + \\\r\n               'price_time timestamp,' + \\\r\n               'stock_name varchar,' + \\\r\n               'signal_price float,' + \\\r\n               'PRIMARY KEY (price_time, symbol))')\r\n\r\n## create Cassandra instance\r\ncluster = Cluster()\r\n\r\n## establish Cassandra connection, using local default\r\nsession = cluster.connect()\r\n\r\n## use fenagocdma keyspace\r\nsession.set_keyspace('fenagocdma')\r\n\r\n## create alert_by_date table\r\ncreate_alertbydate(session)\r\n\r\n## close Cassandra connection\r\ncluster.shutdown()\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-18T13:47:55+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1589809665399_822452100",
      "id": "paragraph_1589809665399_822452100",
      "dateCreated": "2020-05-18T13:47:45+0000",
      "dateStarted": "2020-05-18T13:47:55+0000",
      "dateFinished": "2020-05-18T13:47:55+0000",
      "status": "FINISHED",
      "$$hashKey": "object:5966"
    },
    {
      "text": "# -*- coding: utf-8 -*-\r\n# program: lab06_005.py\r\n\r\n## import Cassandra driver library\r\nfrom cassandra.cluster import Cluster\r\nfrom decimal import *\r\n\r\n## web is the shorthand alias of pandas_datareader\r\nimport pandas_datareader as web\r\nimport datetime\r\n\r\n## import BeautifulSoup and requests\r\nfrom bs4 import BeautifulSoup\r\nimport requests\r\n\r\n## function to insert historical data into table quote\r\n## ss: Cassandra session\r\n## sym: stock symbol\r\n## d: standardized DataFrame containing historical data\r\n## sn: stock name\r\ndef insert_quote(ss, sym, d, sn):\r\n    ## CQL to insert data, ? is the placeholder for parameters\r\n    insert_cql = \"INSERT INTO quote (\" + \\\r\n                 \"symbol, price_time, open_price, high_price,\" + \\\r\n                 \"low_price, close_price, volume, stock_name\" + \\\r\n                 \") VALUES (?, ?, ?, ?, ?, ?, ?, ?)\"\r\n    ## prepare the insert CQL as it will run repeatedly\r\n    insert_stmt = ss.prepare(insert_cql)\r\n\r\n    ## set decimal places to 4 digits\r\n    getcontext().prec = 4\r\n\r\n    ## loop thru the DataFrame and insert records\r\n    for index, row in d.iterrows():\r\n        ss.execute(insert_stmt, \\\r\n                   [sym, index, \\\r\n                   Decimal(row['open_price']), \\\r\n                   Decimal(row['high_price']), \\\r\n                   Decimal(row['low_price']), \\\r\n                   Decimal(row['close_price']), \\\r\n                   Decimal(row['volume']), \\\r\n                   sn])\r\n\r\n## retrieve the historical daily stock quote from Yahoo! Finance\r\n## Parameters\r\n## sym: stock symbol\r\n## sd: start date\r\n## ed: end date\r\ndef collect_data(sym, sd, ed):\r\n    ## data is a DataFrame holding the daily stock quote\r\n    data = web.DataReader(sym, 'yahoo', sd, ed)\r\n    return data\r\n\r\n## transform received data into standardized format\r\n## Parameter\r\n## d: DataFrame containing Yahoo! Finance stock quote\r\ndef transform_yahoo(d):\r\n    ## drop extra column 'Adj Close'\r\n    d1 = d.drop(['Adj Close'], axis=1)\r\n\r\n    ## standardize the column names\r\n    ## rename index column to price_date\r\n    d1.index.names=['price_date']\r\n\r\n    ## rename the columns to match the respective columns\r\n    d1 = d1.rename(columns={'Open':'open_price', \\\r\n                            'High':'high_price', \\\r\n                            'Low':'low_price', \\\r\n                            'Close':'close_price', \\\r\n                            'Volume':'volume'})\r\n    return d1\r\n\r\n## function to retrieve watchlist\r\n## ss: Cassandra session\r\n## ws: watchlist code\r\ndef load_watchlist(ss, ws):\r\n    ## CQL to select data, ? is the placeholder for parameters\r\n    select_cql = \"SELECT symbol FROM watchlist \" + \\\r\n                 \"WHERE watch_list_code=?\"\r\n\r\n    ## prepare select CQL\r\n    select_stmt = ss.prepare(select_cql)\r\n\r\n    ## execute the select CQL\r\n    result = ss.execute(select_stmt, [ws])\r\n\r\n    ## initialize the stock array\r\n    stw = []\r\n\r\n    ## loop thru the query resultset to make up the DataFrame\r\n    for r in result:\r\n        stw.append(r.symbol)\r\n\r\n    return stw\r\n\r\n## function to retrieve stock name from Yahoo!Finance\r\n## sym: stock symbol\r\ndef get_stock_name(sym):\r\n\turl = 'http://finance.yahoo.com/q/hp?s=' + sym + \\\r\n          '+Historical+Prices'\r\n\tr = requests.get(url)\r\n\tsoup = BeautifulSoup(r.text)\r\n\tdata = soup.findAll('h1')\r\n\tprint('****************')\r\n\tprint(data[0].text)\r\n\tprint('****************')\r\n\treturn data[0].text\r\n\r\ndef testcase001():\r\n    ## create Cassandra instance\r\n    cluster = Cluster()\r\n    \r\n    ## establish Cassandra connection, using local default\r\n    session = cluster.connect('fenagocdma')\r\n    \r\n    start_date = datetime.datetime(2012, 1, 1)\r\n    end_date = datetime.datetime(2014, 6, 28)\r\n    \r\n    ## load the watchlist\r\n    stocks_watched = load_watchlist(session, \"WS01\")\r\n    \r\n    ## iterate the watchlist\r\n    for symbol in stocks_watched:\r\n        ## get stock name\r\n        stock_name = get_stock_name(symbol)\r\n    \r\n        ## collect data\r\n        data = collect_data(symbol, start_date, end_date)\r\n    \r\n        ## transform Yahoo! Finance data\r\n        data = transform_yahoo(data)\r\n    \r\n        ## insert historical data\r\n        insert_quote(session, symbol, data, stock_name)\r\n    \r\n    ## close Cassandra connection\r\n    cluster.shutdown()\r\n\r\ntestcase001()\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-18T13:48:33+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1589809675518_-1388675255",
      "id": "paragraph_1589809675518_-1388675255",
      "dateCreated": "2020-05-18T13:47:55+0000",
      "dateStarted": "2020-05-18T13:48:33+0000",
      "dateFinished": "2020-05-18T13:48:40+0000",
      "status": "FINISHED",
      "$$hashKey": "object:5967"
    },
    {
      "text": "# -*- coding: utf-8 -*-\r\n# program: lab06_006.py\r\n\r\n## import Cassandra driver library\r\nfrom cassandra.cluster import Cluster\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\nimport datetime\r\n\r\n## import Cassandra BatchStatement library\r\nfrom cassandra.query import BatchStatement\r\nfrom decimal import *\r\n\r\n## function to insert historical data into table quote\r\n## ss: Cassandra session\r\n## sym: stock symbol\r\n## sd: start date\r\n## ed: end date\r\n## return a DataFrame of stock quote\r\ndef retrieve_data(ss, sym, sd, ed):\r\n    ## CQL to select data, ? is the placeholder for parameters\r\n    select_cql = \"SELECT * FROM quote WHERE symbol=? \" + \\\r\n                 \"AND price_time >= ? AND price_time <= ?\"\r\n\r\n    ## prepare select CQL\r\n    select_stmt = ss.prepare(select_cql)\r\n\r\n    ## execute the select CQL\r\n    result = ss.execute(select_stmt, [sym, sd, ed])\r\n\r\n    ## initialize an index array\r\n    idx = np.asarray([])\r\n\r\n    ## initialize an array for columns\r\n    cols = np.asarray([])\r\n\r\n    ## loop thru the query resultset to make up the DataFrame\r\n    for r in result:\r\n        idx = np.append(idx, [r.price_time])\r\n        cols = np.append(cols, [r.open_price, r.high_price, \\\r\n                         r.low_price, r.close_price, \\\r\n                         r.volume, r.stock_name])\r\n\r\n    ## reshape the 1-D array into a 2-D array for each day\r\n    cols = cols.reshape(idx.shape[0], 6)\r\n\r\n    ## convert the arrays into a pandas DataFrame\r\n    df = pd.DataFrame(cols, index=idx, \\\r\n                      columns=['open_price', 'high_price', \\\r\n                      'low_price', 'close_price', \\\r\n                      'volume', 'stock_name'])\r\n    return df\r\n\r\n## function to compute a Simple Moving Average on a DataFrame\r\n## d: DataFrame\r\n## prd: period of SMA\r\n## return a DataFrame with an additional column of SMA\r\ndef sma(d, prd):\r\n    d['sma'] = d['close_price'].rolling(window=prd).mean()\r\n    return d\r\n\r\n## function to apply screening rule to generate buy signals\r\n## screening rule, Close > 10-Day SMA\r\n## d: DataFrame\r\n## return a DataFrame containing buy signals\r\ndef signal_close_higher_than_sma10(d):\r\n    return d[d.close_price.eq(d.sma)]\r\n\r\n## function to retrieve watchlist\r\n## ss: Cassandra session\r\n## ws: watchlist code\r\ndef load_watchlist(ss, ws):\r\n    ## CQL to select data, ? is the placeholder for parameters\r\n    select_cql = \"SELECT symbol FROM watchlist \" + \\\r\n                 \"WHERE watch_list_code=?\"\r\n\r\n    ## prepare select CQL\r\n    select_stmt = ss.prepare(select_cql)\r\n\r\n    ## execute the select CQL\r\n    result = ss.execute(select_stmt, [ws])\r\n\r\n    ## initialize the stock array\r\n    stw = []\r\n\r\n    ## loop thru the query resultset to make up the DataFrame\r\n    for r in result:\r\n        stw.append(r.symbol)\r\n\r\n    return stw\r\n\r\n## function to insert historical data into table quote\r\n## ss: Cassandra session\r\n## sym: stock symbol\r\n## d: standardized DataFrame containing historical data\r\n## sn: stock name\r\ndef insert_alert(ss, sym, sd, cp, sn):\r\n    ## CQL to insert data, ? is the placeholder for parameters\r\n    insert_cql1 = \"INSERT INTO alertlist (\" + \\\r\n                 \"symbol, price_time, signal_price, stock_name\" +\\\r\n                 \") VALUES (?, ?, ?, ?)\"\r\n\r\n    ## CQL to insert data, ? is the placeholder for parameters\r\n    insert_cql2 = \"INSERT INTO alert_by_date (\" + \\\r\n                 \"symbol, price_time, signal_price, stock_name\" +\\\r\n                 \") VALUES (?, ?, ?, ?)\"\r\n\r\n    ## prepare the insert CQL as it will run repeatedly\r\n    insert_stmt1 = ss.prepare(insert_cql1)\r\n    insert_stmt2 = ss.prepare(insert_cql2)\r\n\r\n    ## set decimal places to 4 digits\r\n    getcontext().prec = 4\r\n\r\n    ## begin a batch\r\n    batch = BatchStatement()\r\n    \r\n    ## add insert statements into the batch\r\n    batch.add(insert_stmt1, [sym, sd, cp, sn])\r\n    batch.add(insert_stmt2, [sym, sd, cp, sn])\r\n    \r\n    ## execute the batch\r\n    ss.execute(batch)\r\n\r\ndef testcase002():\r\n    ## create Cassandra instance\r\n    cluster = Cluster()\r\n    \r\n    ## establish Cassandra connection, using local default\r\n    session = cluster.connect('fenagocdma')\r\n    \r\n    start_date = datetime.datetime(2012, 6, 28)\r\n    end_date = datetime.datetime(2012, 7, 28)\r\n    \r\n    ## load the watch list\r\n    stocks_watched = load_watchlist(session, \"WS01\")\r\n    \r\n    for symbol in stocks_watched:\r\n        ## retrieve data\r\n        data = retrieve_data(session, symbol, start_date, end_date)\r\n        \r\n        ## compute 10-Day SMA\r\n        data = sma(data, 10)\r\n        \r\n        ## generate the buy-and-hold signals\r\n        alerts = signal_close_higher_than_sma10(data)\r\n        \r\n        ## save the alert list\r\n        for index, r in alerts.iterrows():\r\n            insert_alert(session, symbol, index, \\\r\n                         Decimal(r['close_price']), \\\r\n                         r['stock_name'])\r\n    \r\n    ## close Cassandra connection\r\n    cluster.shutdown()\r\n\r\ntestcase002()\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-18T13:53:59+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1589809713674_-1451387047",
      "id": "paragraph_1589809713674_-1451387047",
      "dateCreated": "2020-05-18T13:48:33+0000",
      "dateStarted": "2020-05-18T13:53:59+0000",
      "dateFinished": "2020-05-18T13:53:59+0000",
      "status": "FINISHED",
      "$$hashKey": "object:5968"
    },
    {
      "text": "# -*- coding: utf-8 -*-\r\n# program: lab06_007.py\r\n\r\n## import Cassandra driver library\r\nfrom cassandra.cluster import Cluster\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\nimport datetime\r\n\r\n## execute CQL statement to retrieve rows of\r\n## How many alerts were generated on a particular stock over\r\n## a specified period of time?\r\ndef alert_over_daterange(ss, sym, sd, ed):\r\n    ## CQL to select data, ? is the placeholder for parameters\r\n    select_cql = \"SELECT * FROM alertlist WHERE symbol=? \" + \\\r\n                 \"AND price_time >= ? AND price_time <= ?\"\r\n\r\n    ## prepare select CQL\r\n    select_stmt = ss.prepare(select_cql)\r\n\r\n    ## execute the select CQL\r\n    result = ss.execute(select_stmt, [sym, sd, ed])\r\n\r\n     ## initialize an index array\r\n    idx = np.asarray([])\r\n\r\n    ## initialize an array for columns\r\n    cols = np.asarray([])\r\n\r\n    ## loop thru the query resultset to make up the DataFrame\r\n    for r in result:\r\n        idx = np.append(idx, [r.price_time])\r\n        cols = np.append(cols, [r.symbol, r.stock_name, \\\r\n                         r.signal_price])\r\n\r\n    ## reshape the 1-D array into a 2-D array for each day\r\n    cols = cols.reshape(idx.shape[0], 3)\r\n\r\n    ## convert the arrays into a pandas DataFrame\r\n    df = pd.DataFrame(cols, index=idx, \\\r\n                      columns=['symbol', 'stock_name', \\\r\n                      'signal_price'])\r\n    return df\r\n\r\ndef testcase001():\r\n    ## create Cassandra instance\r\n    cluster = Cluster()\r\n    \r\n    ## establish Cassandra connection, using local default\r\n    session = cluster.connect()\r\n    \r\n    ## use fenagocdma keyspace\r\n    session.set_keyspace('fenagocdma')\r\n\r\n    ## scan buy-and-hold signals for GS\r\n    ## over 1 month since 28-Jun-2012\r\n    symbol = 'GS'\r\n    start_date = datetime.datetime(2012, 6, 28)\r\n    end_date = datetime.datetime(2012, 7, 28)\r\n    \r\n    ## retrieve alerts\r\n    alerts = alert_over_daterange(session, symbol, \\\r\n                                  start_date, end_date)\r\n    \r\n    for index, r in alerts.iterrows():\r\n        print (index.date(), '\\t', \\\r\n            r['symbol'], '\\t', \\\r\n            r['stock_name'], '\\t', \\\r\n            r['signal_price'])\r\n    \r\n    ## close Cassandra connection\r\n    cluster.shutdown()\r\n\r\ntestcase001()\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-18T13:54:16+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1589810039859_-1991013975",
      "id": "paragraph_1589810039859_-1991013975",
      "dateCreated": "2020-05-18T13:53:59+0000",
      "dateStarted": "2020-05-18T13:54:16+0000",
      "dateFinished": "2020-05-18T13:54:16+0000",
      "status": "FINISHED",
      "$$hashKey": "object:5969"
    },
    {
      "text": "# -*- coding: utf-8 -*-\r\n# program: lab06_008.py\r\n\r\n## import Cassandra driver library\r\nfrom cassandra.cluster import Cluster\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\nimport datetime\r\n\r\n## execute CQL statement to retrieve rows of\r\n## How many alerts were generated on a particular stock over\r\n## a specified period of time?\r\ndef alert_on_date(ss, dd):\r\n    ## CQL to select data, ? is the placeholder for parameters\r\n    select_cql = \"SELECT * FROM alert_by_date WHERE \" + \\\r\n                 \"price_time=?\"\r\n\r\n    ## prepare select CQL\r\n    select_stmt = ss.prepare(select_cql)\r\n\r\n    ## execute the select CQL\r\n    result = ss.execute(select_stmt, [dd])\r\n\r\n     ## initialize an index array\r\n    idx = np.asarray([])\r\n\r\n    ## initialize an array for columns\r\n    cols = np.asarray([])\r\n\r\n    ## loop thru the query resultset to make up the DataFrame\r\n    for r in result:\r\n        idx = np.append(idx, [r.symbol])\r\n        cols = np.append(cols, [r.stock_name, r.price_time, \\\r\n                         r.signal_price])\r\n\r\n    ## reshape the 1-D array into a 2-D array for each day\r\n    cols = cols.reshape(idx.shape[0], 3)\r\n\r\n    ## convert the arrays into a pandas DataFrame\r\n    df = pd.DataFrame(cols, index=idx, \\\r\n                      columns=['stock_name', 'price_time', \\\r\n                      'signal_price'])\r\n    return df\r\n\r\ndef testcase001():\r\n    ## create Cassandra instance\r\n    cluster = Cluster()\r\n    \r\n    ## establish Cassandra connection, using local default\r\n    session = cluster.connect()\r\n    \r\n        \r\n    session.execute(\"CREATE KEYSPACE IF NOT EXISTS fenagocdma \" + \\\r\n                \"WITH replication\" + \\\r\n                \"={'class':'SimpleStrategy', \" + \\\r\n                \"'replication_factor':1}\")\r\n                \r\n    ## use fenagocdma keyspace\r\n    session.set_keyspace('fenagocdma')\r\n\r\n\r\n    ## scan buy-and-hold signals for GS over 1 month since 28-Jun-2012\r\n    on_date = datetime.datetime(2012, 7, 13)\r\n    \r\n    ## retrieve alerts\r\n    alerts = alert_on_date(session, on_date)\r\n    \r\n    ## print out alerts\r\n    for index, r in alerts.iterrows():\r\n        print (index, '\\t', \\\r\n              r['stock_name'], '\\t', \\\r\n              r['signal_price'])\r\n    \r\n    ## close Cassandra connection\r\n    cluster.shutdown()\r\n\r\ntestcase001()\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-18T13:54:28+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1589810056438_-232217619",
      "id": "paragraph_1589810056438_-232217619",
      "dateCreated": "2020-05-18T13:54:16+0000",
      "dateStarted": "2020-05-18T13:54:28+0000",
      "dateFinished": "2020-05-18T13:54:28+0000",
      "status": "FINISHED",
      "$$hashKey": "object:5970"
    },
    {
      "user": "anonymous",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1589810068107_-1994929930",
      "id": "paragraph_1589810068107_-1994929930",
      "dateCreated": "2020-05-18T13:54:28+0000",
      "status": "READY",
      "$$hashKey": "object:5971"
    }
  ],
  "name": "lab_6",
  "id": "2F95WH6MF",
  "defaultInterpreterGroup": "python",
  "version": "0.9.0-preview1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/lab_6"
}