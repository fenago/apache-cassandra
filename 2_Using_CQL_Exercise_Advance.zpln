{
  "paragraphs": [
    {
      "text": "%sh\nSTATUS=\"$(service cassandra status)\"\n\nif [[ $STATUS == *\"is running\"* ]]; then\n    echo \"Cassandra is running\"\nelse \n    echo \" Cassandra not running .... Starting\"  \n    service cassandra restart > /dev/null 2>&1 &\n    echo \" Started\"  \nfi",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sh",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966236_2066211129",
      "id": "paragraph_1593593641203_883550030",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:57"
    },
    {
      "text": "%md\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\r\n# <center><span style=\"color:teal\">Set Up the Notebook</span></center>\r\n\r\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\r\n- Execute a CQL script to initialize the KillrVideo database for this notebook\r\n\r\n#### <span style=\"color:teal\"><b>Step 1:</b></span> Execute the following cell to initialize this notebook. Hover over the right-hand corner of the cell and click the _Run_ button.\r\n\r\n#### **Note:** You don't see the CQL script because the code editor is hidden, but you can still run the cell.\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:40:23+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">Set Up the Notebook</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>Execute a CQL script to initialize the KillrVideo database for this notebook</li>\n</ul>\n<h4><span style=\"color:teal\"><b>Step 1:</b></span> Execute the following cell to initialize this notebook. Hover over the right-hand corner of the cell and click the <em>Run</em> button.</h4>\n<h4><strong>Note:</strong> You don&rsquo;t see the CQL script because the code editor is hidden, but you can still run the cell.</h4>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966237_1850215191",
      "id": "paragraph_1593593684077_890418241",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "dateStarted": "2020-10-11T17:40:24+0000",
      "dateFinished": "2020-10-11T17:40:26+0000",
      "status": "FINISHED",
      "$$hashKey": "object:58"
    },
    {
      "text": "%cassandra\n\n// CQL notebook initialization script\nCREATE KEYSPACE IF NOT EXISTS killrvideo WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\n\nuse killrvideo;\n\n// Remove this section after DROP bug is fixed (https://datastax.jira.com/browse/CP-3499)\n// Note we create the tables and then drop them so we can recreate them.\n// This assures us the tables have the correct configuration.\n// If we only did the CREATE TABLE IF NOT EXISTS, we might end up with a table with the wrong columns or something...\nCREATE TABLE IF NOT EXISTS user_credentials (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS users (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS videos (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS user_videos (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS latest_videos (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_ratings (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_ratings_by_user (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_playback_stats (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_recommendations (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS video_recommendations_by_video (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS videos_by_tag (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS tags_by_letter (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS comments_by_video (key text, PRIMARY KEY(key));\nCREATE TABLE IF NOT EXISTS comments_by_user (key text, PRIMARY KEY(key));\n// END removable section\n\nDROP TABLE IF EXISTS user_credentials;\nDROP TABLE IF EXISTS users;\nDROP TABLE IF EXISTS videos;\nDROP TABLE IF EXISTS user_videos;\nDROP TABLE IF EXISTS latest_videos;\nDROP TABLE IF EXISTS video_ratings;\nDROP TABLE IF EXISTS video_ratings_by_user;\nDROP TABLE IF EXISTS video_playback_stats;\nDROP TABLE IF EXISTS video_recommendations;\nDROP TABLE IF EXISTS video_recommendations_by_video;\nDROP TABLE IF EXISTS videos_by_tag;\nDROP TABLE IF EXISTS tags_by_letter;\nDROP TABLE IF EXISTS comments_by_video;\nDROP TABLE IF EXISTS comments_by_user;\n\n\n// User credentials, keyed by email address so we can authenticate\nCREATE TABLE IF NOT EXISTS user_credentials (\n    email     text,\n    password  text,\n    userid    uuid,\n    PRIMARY KEY (email)\n);\n\n// Videos by id\nCREATE TABLE IF NOT EXISTS videos (\n    videoid                uuid,\n    userid                 uuid,\n    name                   text,\n    description            text,\n    location               text,\n    location_type          int,\n    preview_image_location text,\n    tags                   set<text>,\n    added_date             timestamp,\n    PRIMARY KEY (videoid)\n);\n\n// One-to-many from user point of view (lookup table)\nCREATE TABLE IF NOT EXISTS user_videos (\n    userid                 uuid,\n    added_date             timestamp,\n    videoid                uuid,\n    name                   text,\n    preview_image_location text,\n    PRIMARY KEY (userid, added_date, videoid)\n) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);\n\n// Track latest videos, grouped by day (if we ever develop a bad hotspot from the daily grouping here, we could mitigate by\n// splitting the row using an arbitrary group number, making the partition key (yyyymmdd, group_number))\nCREATE TABLE IF NOT EXISTS latest_videos (\n    yyyymmdd text,\n    added_date timestamp,\n    videoid uuid,\n    userid uuid,\n    name text,\n    preview_image_location text,\n    PRIMARY KEY (yyyymmdd, added_date, videoid)\n) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);\n\n// Video ratings (counter table)\nCREATE TABLE IF NOT EXISTS video_ratings (\n    videoid uuid,\n    rating_counter counter,\n    rating_total counter,\n    PRIMARY KEY (videoid)\n);\n\n// Video ratings by user (to try and mitigate voting multiple times)\nCREATE TABLE IF NOT EXISTS video_ratings_by_user (\n    videoid uuid,\n    userid uuid,\n    rating int,\n    PRIMARY KEY (videoid, userid)\n);\n\n// Records the number of views/playbacks of a video\nCREATE TABLE IF NOT EXISTS video_playback_stats (\n    videoid uuid,\n    views counter,\n    PRIMARY KEY (videoid)\n);\n\n// Recommendations by user (powered by Spark), with the newest videos added to the site always first\nCREATE TABLE IF NOT EXISTS video_recommendations ( \n    userid uuid,\n    added_date timestamp,\n    videoid uuid,\n    rating float,\n    authorid uuid,\n    name text,\n    preview_image_location text,\n    PRIMARY KEY(userid, added_date, videoid)\n) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC);\n\n// Recommendations by video (powered by Spark)\nCREATE TABLE IF NOT EXISTS video_recommendations_by_video (\n    videoid uuid,\n    userid uuid,\n    rating float,\n    added_date timestamp STATIC,\n    authorid uuid STATIC,\n    name text STATIC,\n    preview_image_location text STATIC,\n    PRIMARY KEY(videoid, userid)\n);\n\n// Index for tag keywords\nCREATE TABLE IF NOT EXISTS videos_by_tag (\n    tag text,\n    videoid uuid,\n    added_date timestamp,\n    userid uuid,\n    name text,\n    preview_image_location text,\n    tagged_date timestamp,\n    PRIMARY KEY (tag, videoid)\n);\n\n// Index for tags by first letter in the tag\nCREATE TABLE IF NOT EXISTS tags_by_letter (\n    first_letter text,\n    tag text,\n    PRIMARY KEY (first_letter, tag)\n);\n\n// Comments for a given video\nCREATE TABLE IF NOT EXISTS comments_by_video (\n    videoid uuid,\n    commentid timeuuid,\n    userid uuid,\n    comment text,\n    PRIMARY KEY (videoid, commentid)\n) WITH CLUSTERING ORDER BY (commentid DESC);\n\n// Comments for a given user\nCREATE TABLE IF NOT EXISTS comments_by_user (\n    userid uuid,\n    commentid timeuuid,\n    videoid uuid,\n    comment text,\n    PRIMARY KEY (userid, commentid)\n) WITH CLUSTERING ORDER BY (commentid DESC);\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966238_-1005242870",
      "id": "paragraph_1593593694797_783258182",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:59"
    },
    {
      "text": "%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\r\n# <center><span style=\"color:teal\">DESCRIBE KEYSPACES Command</span></center>\r\n\r\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\r\n- Get an initial feel for the syntax of CQL\r\n- List all the keyspaces in our database\r\n\r\n\r\n#### **Note:** In CaaS, the database contains keyspaces, which contain tables.\r\n<br>\r\n\r\n#### <span style=\"color:teal\"><b>Step 1:</b></span> List the keyspaces in your database by executing the following command in the next cell:\r\n```\r\nDESCRIBE KEYSPACES;\r\n```\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">DESCRIBE KEYSPACES Command</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>Get an initial feel for the syntax of CQL</li>\n<li>List all the keyspaces in our database</li>\n</ul>\n<h4><strong>Note:</strong> In CaaS, the database contains keyspaces, which contain tables.</h4>\n<br>\n<h4><span style=\"color:teal\"><b>Step 1:</b></span> List the keyspaces in your database by executing the following command in the next cell:</h4>\n<pre><code>DESCRIBE KEYSPACES;\n</code></pre>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966238_-59716586",
      "id": "paragraph_1593593705576_-1023478899",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:60"
    },
    {
      "text": "// Enter and execute the DESCRIBE KEYSPACES command in this cell\n// Click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner of this cell\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966238_916132584",
      "id": "paragraph_1593593706617_917691436",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:61"
    },
    {
      "text": "%md\r\n  **Step 2:** Review the noteworthy points of the previous cell.\r\n\r\n-  CQL Comments start with `//` and continue to the end of the line. CQL ignores comments - they are for human readable notes.\r\n\r\n    ![CQLComment](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/CQLComment.png \"CQLComment\")\r\n\r\n-  CQL commands end with `;`\r\n\r\n    ![CQLEnd](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/CQLEnd.png \"CQLEnd\")\r\n\r\n-  The note in the results explains that `DESCRIBE` is not a valid CQL statement. Technically, `DESCRIBE` is not CQL, but cqlsh (the CQL command shell) and Studio notebooks support `DESCRIBE`.\r\n\r\n    ![Note](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/DescribeNote.png)\r\n\r\n-  The `DESCRIBE` command results show all the keyspaces, which are mostly used by Cassandra, but we will use `killrvideo` for our KillrVideo app.\r\n\r\n    ![SchemaButton](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/KeyspaceList.png \"SchemaButton\")\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> Review the noteworthy points of the previous cell.</h4>\n<ul>\n<li>\n<p>CQL Comments start with <code>//</code> and continue to the end of the line. CQL ignores comments - they are for human readable notes.</p>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/CQLComment.png\" alt=\"CQLComment\" title=\"CQLComment\" /></p>\n</li>\n<li>\n<p>CQL commands end with <code>;</code></p>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/CQLEnd.png\" alt=\"CQLEnd\" title=\"CQLEnd\" /></p>\n</li>\n<li>\n<p>The note in the results explains that <code>DESCRIBE</code> is not a valid CQL statement. Technically, <code>DESCRIBE</code> is not CQL, but cqlsh (the CQL command shell) and Studio notebooks support <code>DESCRIBE</code>.</p>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/DescribeNote.png\" alt=\"Note\" /></p>\n</li>\n<li>\n<p>The <code>DESCRIBE</code> command results show all the keyspaces, which are mostly used by Cassandra, but we will use <code>killrvideo</code> for our KillrVideo app.</p>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/KeyspaceList.png\" alt=\"SchemaButton\" title=\"SchemaButton\" /></p>\n</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966239_1449111447",
      "id": "paragraph_1593593707217_-403093966",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:62"
    },
    {
      "text": "%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\r\n# <center><span style=\"color:teal\">DESCRIBE KEYSPACE Command</span></center>\r\n\r\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\r\n- Inspect the `killrvideo` keyspace\r\n\r\n<br>\r\n<span style=\"color:teal\"><b>Step 1:</b></span> In the following CQL cell, execute a `DESCRIBE KEYSPACE` command for the `killrvideo` keyspace.\r\n<br>\r\n<details>\r\n\r\n<summary><i><span style=\"color:blue\">Need a command hint? Click here.</span></i></summary>\r\n\r\n> #### Use the keywords `DESCRIBE KEYSPACE` following by the keyspace name.\r\n> #### Don't forget to complete the command with a semi-colon (`;`).\r\n</details>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Just want to copy the command? Click here.</span></i></summary>\r\n\r\n```\r\nDESCRIBE KEYSPACE killrvideo;\r\n```\r\n</details>",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">DESCRIBE KEYSPACE Command</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>Inspect the <code>killrvideo</code> keyspace</li>\n</ul>\n<br>\n<span style=\"color:teal\"><b>Step 1:</b></span> In the following CQL cell, execute a `DESCRIBE KEYSPACE` command for the `killrvideo` keyspace.\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a command hint? Click here.</span></i></summary>\n<blockquote>\n<h4>Use the keywords <code>DESCRIBE KEYSPACE</code> following by the keyspace name.</h4>\n<h4>Don&rsquo;t forget to complete the command with a semi-colon (<code>;</code>).</h4>\n</blockquote>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Just want to copy the command? Click here.</span></i></summary>\n<pre><code>DESCRIBE KEYSPACE killrvideo;\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966239_-1104799036",
      "id": "paragraph_1593593707676_-2115944363",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:63"
    },
    {
      "text": "// Enter and execute the command in this cell to inspect the killrvideo keyspace\n// Remember, click in the cell and press SHIFT+ENTER or click the Run button in the top-right corner of this cell\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966239_-1058345566",
      "id": "paragraph_1593593707796_-502023590",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:64"
    },
    {
      "text": "%md\n\n#### <span style=\"color:teal\"><b>Step 2:</b></span> Inspect the `DESCRIBE KEYSPACE` results.\n\n#### The results for this command show three things:\n- The note suggesting (again) that we use the _Schema Viewer_ instead of the `DESCRIBE` command\n- The CQL command used to create the keyspace, including the replication strategy and the replication factor\n<h4> - The replication strategy tells Cassandra how to distribute the replicated data across the database machines</h4>\n<h4> - The replication factor tells Cassandra how many copies of the data to create</h4>\n\n![DescribeKeyspaceKillrvideo](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/DescribeKeyspaceKillrvideo.png)\n\n\n- The commands to create (almost) all the tables KillrVideo needs. We say \"almost\" because in the next section, you will learn about `CREATE TABLE` and add the missing table!",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><span style=\"color:teal\"><b>Step 2:</b></span> Inspect the <code>DESCRIBE KEYSPACE</code> results.</h4>\n<h4>The results for this command show three things:</h4>\n<ul>\n<li>The note suggesting (again) that we use the <em>Schema Viewer</em> instead of the <code>DESCRIBE</code> command</li>\n<li>The CQL command used to create the keyspace, including the replication strategy and the replication factor</li>\n</ul>\n<h4> - The replication strategy tells Cassandra how to distribute the replicated data across the database machines</h4>\n<h4> - The replication factor tells Cassandra how many copies of the data to create</h4>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/DescribeKeyspaceKillrvideo.png\" alt=\"DescribeKeyspaceKillrvideo\" /></p>\n<ul>\n<li>The commands to create (almost) all the tables KillrVideo needs. We say &ldquo;almost&rdquo; because in the next section, you will learn about <code>CREATE TABLE</code> and add the missing table!</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966239_-1286269835",
      "id": "paragraph_1593593707677_1056563617",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:65"
    },
    {
      "text": "%md\r\n\r\n  **Step 2:** Inspect the `DESCRIBE KEYSPACE` results.\r\n\r\nThe results for this command show three things:\r\n\r\n-  The note suggesting (again) that we use the *Schema Viewer* instead of the `DESCRIBE` command\r\n\r\n-  The CQL command used to create the keyspace, including the replication strategy and the replication factor\r\n\r\n    #### - The replication strategy tells Cassandra how to distribute the replicated data across the database machines\r\n\r\n    #### - The replication factor tells Cassandra how many copies of the data to create\r\n\r\n![DescribeKeyspaceKillrvideo](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/DescribeKeyspaceKillrvideo.png)\r\n\r\n**Note:** If you are like most app developers, you probably don't care about the replication details\r\n\r\nThe commands to create (almost) all the tables KillrVideo needs. We say “almost” because in the next section, you will learn about `CREATE TABLE` and add the missing table!\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> Inspect the <code>DESCRIBE KEYSPACE</code> results.</h4>\n<p>The results for this command show three things:</p>\n<ul>\n<li>\n<p>The note suggesting (again) that we use the <em>Schema Viewer</em> instead of the <code>DESCRIBE</code> command</p>\n</li>\n<li>\n<p>The CQL command used to create the keyspace, including the replication strategy and the replication factor</p>\n<h4>- The replication strategy tells Cassandra how to distribute the replicated data across the database machines</h4>\n<h4>- The replication factor tells Cassandra how many copies of the data to create</h4>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/DescribeKeyspaceKillrvideo.png\" alt=\"DescribeKeyspaceKillrvideo\" /></p>\n<p><strong>Note:</strong> If you are like most app developers, you probably don&rsquo;t care about the replication details</p>\n<p>The commands to create (almost) all the tables KillrVideo needs. We say “almost” because in the next section, you will learn about <code>CREATE TABLE</code> and add the missing table!</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966239_144449914",
      "id": "paragraph_1593593707577_-1979300619",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:66"
    },
    {
      "text": "%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\r\n# <center><span style=\"color:teal\">CREATE TABLE Command</span></center>\r\n\r\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\r\n- Learn how to use the `CREATE TABLE` command\r\n- Create the `killrvideo.users` table\r\n\r\n\r\n#### Here's a spec for the columns of the missing `killrvideo.users` table (the bold indicates `userid` is the primary key):\r\n![UsersTableSpec](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UsersTableSpec.png \"UsersTableSpec\" )\r\n\r\nBefore we try to create the table, let's look at the other `CREATE TABLE` commands in the previous results.\r\n<br>\r\n#### <span style=\"color:teal\"><b>Step 1:</b></span> Scroll up to the `DESCRIBE KEYSPACE` results and locate the command to create the `user_videos` table. The `user_videos` table is where KillrVideo keeps track of which videos a user has added. It looks like this:\r\n\r\n```\r\nCREATE TABLE killrvideo.user_videos (\r\n  userid uuid,\r\n  added_date timestamp,\r\n  videoid uuid,\r\n  name text,\r\n  preview_image_location text,\r\n  PRIMARY KEY ((userid), added_date, videoid)\r\n  ... // Nasty boilerplate code omitted here\r\n);\r\n```\r\n\r\n---\r\n</p> <h4><b>Note:</b><br>\r\n<blockquote cite=\"http://www.worldwildlife.org/who/index.html\">We left off everything after the <code>PRIMARY KEY</code> clause because all the trailing stuff is boilerplate table tuning parameters that we don't need to worry about. When we create a table, if we don't specifically set these parameters, they will receive default values - which is what you want virtually all the time. .</blockquote></h4></p>\r\n---\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">CREATE TABLE Command</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>Learn how to use the <code>CREATE TABLE</code> command</li>\n<li>Create the <code>killrvideo.users</code> table</li>\n</ul>\n<h4>Here&rsquo;s a spec for the columns of the missing <code>killrvideo.users</code> table (the bold indicates <code>userid</code> is the primary key):</h4>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UsersTableSpec.png\" alt=\"UsersTableSpec\" title=\"UsersTableSpec\" /></p>\n<p>Before we try to create the table, let&rsquo;s look at the other <code>CREATE TABLE</code> commands in the previous results.<br />\n<br></p>\n<h4><span style=\"color:teal\"><b>Step 1:</b></span> Scroll up to the <code>DESCRIBE KEYSPACE</code> results and locate the command to create the <code>user_videos</code> table. The <code>user_videos</code> table is where KillrVideo keeps track of which videos a user has added. It looks like this:</h4>\n<pre><code>CREATE TABLE killrvideo.user_videos (\n  userid uuid,\n  added_date timestamp,\n  videoid uuid,\n  name text,\n  preview_image_location text,\n  PRIMARY KEY ((userid), added_date, videoid)\n  ... // Nasty boilerplate code omitted here\n);\n</code></pre>\n<hr />\n</p> <h4><b>Note:</b><br>\n<blockquote cite=\"http://www.worldwildlife.org/who/index.html\">We left off everything after the <code>PRIMARY KEY</code> clause because all the trailing stuff is boilerplate table tuning parameters that we don't need to worry about. When we create a table, if we don't specifically set these parameters, they will receive default values - which is what you want virtually all the time. .</blockquote></h4></p>\n---\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966240_-1051555198",
      "id": "paragraph_1593593707337_2138067127",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:67"
    },
    {
      "text": "%md\r\n\r\n\r\n  **Step 2:** To get a feel for the syntax, identify key parts of the `CREATE TABLE` command. Find the following parts:\r\n\r\n-  Keyspace name\r\n\r\n-  Table name\r\n\r\n-  Column definitions (column names and associated data types)\r\n\r\n-  Primary key clause\r\n\r\n    ![UserVideosTable](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UserVideosTable.png \"UserVideosTable\")\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> To get a feel for the syntax, identify key parts of the <code>CREATE TABLE</code> command. Find the following parts:</h4>\n<ul>\n<li>\n<p>Keyspace name</p>\n</li>\n<li>\n<p>Table name</p>\n</li>\n<li>\n<p>Column definitions (column names and associated data types)</p>\n</li>\n<li>\n<p>Primary key clause</p>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UserVideosTable.png\" alt=\"UserVideosTable\" title=\"UserVideosTable\" /></p>\n</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966241_103982461",
      "id": "paragraph_1593593707156_-1728335028",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:68"
    },
    {
      "text": "%md\r\n\r\n  **Step 3:** Look at the data types in the column definitions. Consider each of these types:\r\n\r\n-  The `uuid` type is a universally unique identifier which Cassandra can generate efficiently in a distributed manner. We use `uuid`s in Cassandra instead of incrementing counters for all ID fields.\r\n\r\n-  A `timestamp` is a point in time relative to January 1, 1970.\r\n\r\n-  The `text` type is just a simple string, like a `VARCHAR` in SQL.\r\n\r\n-  This command doesn't show them, but there are other standard types such as `boolean`, `int` and `float`.\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 3:</strong> Look at the data types in the column definitions. Consider each of these types:</h4>\n<ul>\n<li>\n<p>The <code>uuid</code> type is a universally unique identifier which Cassandra can generate efficiently in a distributed manner. We use <code>uuid</code>s in Cassandra instead of incrementing counters for all ID fields.</p>\n</li>\n<li>\n<p>A <code>timestamp</code> is a point in time relative to January 1, 1970.</p>\n</li>\n<li>\n<p>The <code>text</code> type is just a simple string, like a <code>VARCHAR</code> in SQL.</p>\n</li>\n<li>\n<p>This command doesn&rsquo;t show them, but there are other standard types such as <code>boolean</code>, <code>int</code> and <code>float</code>.</p>\n</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966241_-1281650690",
      "id": "paragraph_1593593706974_-1413527922",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:69"
    },
    {
      "text": "%md\r\n\r\n  **Step 4:** Investigate the `PRIMARY KEY` clause. Notice that the primary key contains three columns: `userid`, `added_date` and `videoid`. These three columns uniquely identify each row. We study primary keys further in the data modeling notebook.\r\n\r\n#### Hopefully, dissecting the `CREATE TABLE` command for `user_videos` has given you good intuition. Let's put that intuition to work!\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 4:</strong> Investigate the <code>PRIMARY KEY</code> clause. Notice that the primary key contains three columns: <code>userid</code>, <code>added_date</code> and <code>videoid</code>. These three columns uniquely identify each row. We study primary keys further in the data modeling notebook.</h4>\n<h4>Hopefully, dissecting the <code>CREATE TABLE</code> command for <code>user_videos</code> has given you good intuition. Let&rsquo;s put that intuition to work!</h4>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966241_-1447780275",
      "id": "paragraph_1593593706836_1182539953",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:70"
    },
    {
      "text": "%md\r\n\r\n#### <span style=\"color:teal\"><b>Step 5:</b></span> Create the `killrvideo.users` table. Write the code in the next cell. Use the columns specified in the table just below (the bold `userid` column is the primary key - a single column).\r\n\r\n![UsersTableSpec](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UsersTableSpec.png \"UsersTableSpec\" )\r\n\r\n<br>\r\n<details>\r\n<summary><i><span style=\"color:blue\">Need a hint to help you start writing the command? Click here.</span></i></summary>\r\n\r\n```\r\nCREATE TABLE killrvideo.users (\r\n  // List columns and their data types here (put a comma after each column/type pair)\r\n  PRIMARY KEY(userid)\r\n);\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Want to see the entire solution? Click here.</span></i></summary>\r\n\r\n```\r\nCREATE TABLE killrvideo.users (\r\n  userid     uuid,\r\n  firstname  text,\r\n  lastname   text,\r\n  email      text,\r\n  created_date timestamp,\r\n  PRIMARY KEY(userid)\r\n);\r\n```\r\n\r\n</details>\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><span style=\"color:teal\"><b>Step 5:</b></span> Create the <code>killrvideo.users</code> table. Write the code in the next cell. Use the columns specified in the table just below (the bold <code>userid</code> column is the primary key - a single column).</h4>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UsersTableSpec.png\" alt=\"UsersTableSpec\" title=\"UsersTableSpec\" /></p>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint to help you start writing the command? Click here.</span></i></summary>\n<pre><code>CREATE TABLE killrvideo.users (\n  // List columns and their data types here (put a comma after each column/type pair)\n  PRIMARY KEY(userid)\n);\n</code></pre>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Want to see the entire solution? Click here.</span></i></summary>\n<pre><code>CREATE TABLE killrvideo.users (\n  userid     uuid,\n  firstname  text,\n  lastname   text,\n  email      text,\n  created_date timestamp,\n  PRIMARY KEY(userid)\n);\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966241_1694499607",
      "id": "paragraph_1593593706455_446388155",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:71"
    },
    {
      "text": "// Write and execute the CQL to create the killrvideo.users table here\r\n// To execute this cell press SHIFT+ENTER or click the Run button in the top-right corner of this cell\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966242_-1406308511",
      "id": "paragraph_1593594340243_1783992421",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:72"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966242_-6550170",
      "id": "paragraph_1593594342398_-645287669",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:73"
    },
    {
      "text": "%md\r\n\r\n#### <span style=\"color:teal\"><b>Step 6:</b></span> Verify the `users` table is correct by describing the keyspace in the next cell.\r\n- Verify the table name is correct\r\n- Verify the column names and associated data types match the table at the top of this section\r\n- Verify the primary key is `userid`\r\n\r\n---\r\n\r\n#### **Note:**\r\n> #### You can either use the `DESCRIBE KEYSPACE` command, or try your luck with the `DESCRIBE TABLE` command - we bet you can figure it out!\r\n\r\n---\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Need the `DESCRIBE KEYSPACE` command? Click here.</span></i></summary>\r\n\r\n```\r\nDESCRIBE KEYSPACE killrvideo;\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Want the `DESCRIBE TABLE` command instead? Click here.</span></i></summary>\r\n\r\n```\r\nDESCRIBE TABLE killrvideo.users;\r\n```\r\n</details>",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><span style=\"color:teal\"><b>Step 6:</b></span> Verify the <code>users</code> table is correct by describing the keyspace in the next cell.</h4>\n<ul>\n<li>Verify the table name is correct</li>\n<li>Verify the column names and associated data types match the table at the top of this section</li>\n<li>Verify the primary key is <code>userid</code></li>\n</ul>\n<hr />\n<h4><strong>Note:</strong></h4>\n<blockquote>\n<h4>You can either use the <code>DESCRIBE KEYSPACE</code> command, or try your luck with the <code>DESCRIBE TABLE</code> command - we bet you can figure it out!</h4>\n</blockquote>\n<hr />\n<details>\n<summary><i><span style=\"color:blue\">Need the `DESCRIBE KEYSPACE` command? Click here.</span></i></summary>\n<pre><code>DESCRIBE KEYSPACE killrvideo;\n</code></pre>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Want the `DESCRIBE TABLE` command instead? Click here.</span></i></summary>\n<pre><code>DESCRIBE TABLE killrvideo.users;\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966242_714206635",
      "id": "paragraph_1593594343318_-2053394910",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:74"
    },
    {
      "text": "// Let's look at the killrvideo keyspace again to verify the users table\n// To execute this cell, click here and then SHIFT+ENTER or click the Run button in the top-right corner of this cell\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966242_-1095257229",
      "id": "paragraph_1593594343536_-871596797",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:75"
    },
    {
      "text": "%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\")\r\n\r\nINSERT Command\r\n\r\n### In this section, you will do the following things:\r\n\r\n- Learn how to use the `INSERT` command\r\n\r\n- Insert a user into the `users` table\r\n\r\n\r\n#### Time to start putting some data into the `users` table!\r\n\r\n\r\n  **Step 1:** Inspect the following example `INSERT` command.\r\n\r\n- Identify the keyspace and table names\r\n\r\n- Identify the columns names\r\n\r\n- Identify the corresponding column values\r\n\r\n- Take note of how to generate values for `uuid`s and `timestamp`s\r\n\r\n![InsertUser](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/InsertUser.png \"InsertUser\")\r\n\r\n#### Yeah, it works pretty much like you would expect.\r\n\r\n\r\n#### **Note:**\r\n\r\n> #### The column names specify the order of the corresponding values. This means that the order of the column names must match the order of the values.\r\n>\r\n> #### \r\n>\r\n> #### Cassandra uses a sparse storage mechanism to store rows. This means that rows don't have to contain values for all columns. Further, Cassandra only consumes space for those columns used by an individual row.\r\n>\r\n> #### So, you don't have to worry about unused columns consuming space, but when you insert a row, you must at least include all columns specified by the primary key. The reasoning for this constraint will become clear in the Data Modeling notebook.\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<p>INSERT Command</p>\n<h3>In this section, you will do the following things:</h3>\n<ul>\n<li>\n<p>Learn how to use the <code>INSERT</code> command</p>\n</li>\n<li>\n<p>Insert a user into the <code>users</code> table</p>\n</li>\n</ul>\n<h4>Time to start putting some data into the <code>users</code> table!</h4>\n<h4><strong>Step 1:</strong> Inspect the following example <code>INSERT</code> command.</h4>\n<ul>\n<li>\n<p>Identify the keyspace and table names</p>\n</li>\n<li>\n<p>Identify the columns names</p>\n</li>\n<li>\n<p>Identify the corresponding column values</p>\n</li>\n<li>\n<p>Take note of how to generate values for <code>uuid</code>s and <code>timestamp</code>s</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/InsertUser.png\" alt=\"InsertUser\" title=\"InsertUser\" /></p>\n<h4>Yeah, it works pretty much like you would expect.</h4>\n<h4><strong>Note:</strong></h4>\n<blockquote>\n<h4>The column names specify the order of the corresponding values. This means that the order of the column names must match the order of the values.</h4>\n<h4></h4>\n<h4>Cassandra uses a sparse storage mechanism to store rows. This means that rows don&rsquo;t have to contain values for all columns. Further, Cassandra only consumes space for those columns used by an individual row.</h4>\n<h4>So, you don&rsquo;t have to worry about unused columns consuming space, but when you insert a row, you must at least include all columns specified by the primary key. The reasoning for this constraint will become clear in the Data Modeling notebook.</h4>\n</blockquote>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966242_453207240",
      "id": "paragraph_1593594343159_2121890187",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:76"
    },
    {
      "text": "%md\r\n  **Step 2:** Copy, paste and execute this command in the following cell:\r\n\r\n    INSERT INTO killrvideo.users (userid, firstname, lastname, email, created_date)\r\n      VALUES(uuid(), 'Jeff', 'Carpenter', 'jc@fenago.com', toTimestamp(now()));\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> Copy, paste and execute this command in the following cell:</h4>\n<pre><code>INSERT INTO killrvideo.users (userid, firstname, lastname, email, created_date)\n  VALUES(uuid(), 'Jeff', 'Carpenter', 'jc@fenago.com', toTimestamp(now()));\n</code></pre>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966243_564135813",
      "id": "paragraph_1593596500036_1794760341",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:77"
    },
    {
      "text": "// Copy and paste the INSERT command from the bottom of the previous cell here\r\n\r\n// Then, execute this cell (click here and then SHIFT+ENTER or click the Run button in the top-right corner of this cell)\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966243_1126367848",
      "id": "paragraph_1593594340056_-108408644",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:78"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966243_-339161696",
      "id": "paragraph_1593594339836_-248983392",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:79"
    },
    {
      "text": "%md\r\n\r\n  **Step 3:** Inspect the results of the insert by executing the following cell.\r\n\r\n-  It appears that the cell is empty, but that is because we have hidden the code editor\r\n\r\n-  Just click on the *Run* button to execute it - no need to expand the code editor\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 3:</strong> Inspect the results of the insert by executing the following cell.</h4>\n<ul>\n<li>\n<p>It appears that the cell is empty, but that is because we have hidden the code editor</p>\n</li>\n<li>\n<p>Just click on the <em>Run</em> button to execute it - no need to expand the code editor</p>\n</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966243_450194855",
      "id": "paragraph_1593594339657_-1047005254",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:80"
    },
    {
      "text": "//                    ,---,_          ,\n//                    _>   `'-.  .--'/\n//               .--'` ._      `/   <_\n//                >,-' ._'.. ..__ . ' '-.\n//             .-'   .'`         `'.     '.\n//              >   / >`-.     .-'< \\ , '._\\\n//             /    ; '-._>   <_.-' ;  '._>\n//             `>  ,/  /___\\ /___\\  \\_  /\n//             `.-|(|  \\o_/  \\o_/   |)|`\n//                 \\;        \\      ;/\n//                   \\  .-,   )-.  /\n//                    /`  .'-'.  `\\\n//                   ;_.-`.___.'-.;\n//\n//                 Hey! You Peeked!\n//\n// We have hidden this cell because we don't encourage the general use of this command\n// This command requires a full table scan\n// So, it works fine for small tables, but large tables would require massive amounts of data transfer - which is not performant\nSELECT * FROM killrvideo.users;",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966243_387995245",
      "id": "paragraph_1593594425258_-1071004505",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:81"
    },
    {
      "text": "%md\r\n\r\n  **Step 4:** Use the results in the previous cell to verify your `INSERT` command worked correctly.\r\n\r\n-  For each of the columns, verify the values are correct\r\n\r\n-  Verify that all columns are present\r\n\r\n-  Note the `uuid` value CQL generated for the `userid` column\r\n\r\n-  Also note the generated `timestamp` value in the `created_date` column\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 4:</strong> Use the results in the previous cell to verify your <code>INSERT</code> command worked correctly.</h4>\n<ul>\n<li>\n<p>For each of the columns, verify the values are correct</p>\n</li>\n<li>\n<p>Verify that all columns are present</p>\n</li>\n<li>\n<p>Note the <code>uuid</code> value CQL generated for the <code>userid</code> column</p>\n</li>\n<li>\n<p>Also note the generated <code>timestamp</code> value in the <code>created_date</code> column</p>\n</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966243_-1563442316",
      "id": "paragraph_1593594426878_923660930",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:82"
    },
    {
      "text": "%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\r\n# <center><span style=\"color:teal\">Insert Another User</span></center>\r\n\r\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\r\n- Write and execute an `INSERT` command yourself\r\n\r\n<span style=\"color:teal\"><b>Step 1:</b></span> In the following cell, write and execute an `INSERT` command from scratch.\r\n- Insert a user named Cristina Veale\r\n- Her email address is cv@fenago.com\r\n\r\n<br>\r\n<details>\r\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\r\nThe `INSERT` statement you will write here looks just like the statement from the previous step, except the values are different.\r\nTherefore, you will need to change the `firstname`, `lastname` and `email` column values to Cristina's.\r\nAlso, you will still need to generate new `uuid` and `timestamp` values.\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Want to see the command? Click here.</span></i></summary>\r\n\r\n```\r\nINSERT INTO killrvideo.users (userid, firstname, lastname, email, created_date)\r\n  VALUES(uuid(), 'Cristina', 'Veale', 'cv@fenago.com', toTimestamp(now()));\r\n```\r\n\r\n</details>\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">Insert Another User</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>Write and execute an <code>INSERT</code> command yourself</li>\n</ul>\n<p><span style=\"color:teal\"><b>Step 1:</b></span> In the following cell, write and execute an <code>INSERT</code> command from scratch.</p>\n<ul>\n<li>Insert a user named Cristina Veale</li>\n<li>Her email address is <a href=\"mailto:cv@fenago.com\">cv@fenago.com</a></li>\n</ul>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint? Click here.</span></i></summary>\nThe `INSERT` statement you will write here looks just like the statement from the previous step, except the values are different.\nTherefore, you will need to change the `firstname`, `lastname` and `email` column values to Cristina's.\nAlso, you will still need to generate new `uuid` and `timestamp` values.\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Want to see the command? Click here.</span></i></summary>\n<pre><code>INSERT INTO killrvideo.users (userid, firstname, lastname, email, created_date)\n  VALUES(uuid(), 'Cristina', 'Veale', 'cv@fenago.com', toTimestamp(now()));\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966244_-2083524774",
      "id": "paragraph_1593594427347_1074663352",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:83"
    },
    {
      "text": "// Write the INSERT statement for Cristina in this cell\r\n// When you are ready, execute this cell (click here and then SHIFT+ENTER or click the Run button in the top-right corner of this cell)\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966244_208506834",
      "id": "paragraph_1593594427856_-1399234115",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:84"
    },
    {
      "text": "%md\r\n\r\n  **Step 2:** Again, look at the contents of the `users` table by executing the following (hidden) cell.\r\n\r\n-  Inspect the results to make sure the `INSERT` worked as expected\r\n\r\n-  Notice the difference in the values of the `userid` and `created_date` columns\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> Again, look at the contents of the <code>users</code> table by executing the following (hidden) cell.</h4>\n<ul>\n<li>\n<p>Inspect the results to make sure the <code>INSERT</code> worked as expected</p>\n</li>\n<li>\n<p>Notice the difference in the values of the <code>userid</code> and <code>created_date</code> columns</p>\n</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966244_-2089944223",
      "id": "paragraph_1593594427936_456644902",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:85"
    },
    {
      "text": "%md\r\n\r\nSELECT Command\r\n\r\n### In this section, you will do the following things:\r\n\r\n- Learn the syntax of the CQL `SELECT` command\r\n\r\n- Execute a `SELECT` statement that we have prepared for you to retrieve Cristina's row from the `users` table\r\n\r\n\r\n#### For those unfamiliar with SQL, the suspense of seeing the data querying command is probably killing you. But, for the everybody else, you have already guessed it. It's a `SELECT` command that looks a lot like SQL. Let's take a look.\r\n\r\n\r\n  **Step 1:** Inspect the following command to identify:\r\n\r\n- Keyspace name\r\n\r\n- Table name\r\n\r\n- List of columns the command retrieves\r\n\r\n- `WHERE` clause that specifies the retrieved row(s)\r\n\r\n    ![SelectUser](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/SelectUser.png \"SelectUser\")\r\n\r\n* * * * *\r\n\r\n#### **Note:**\r\n\r\n> #### The list of retrieved columns can be a comma-separated list, or you can use splat (`*`) to retrieve all columns.\r\n>\r\n> #### \r\n>\r\n> #### To specify a `uuid`, copy and paste the entire value including the hyphens. There are NO quotes around `uuid` values.\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>SELECT Command</p>\n<h3>In this section, you will do the following things:</h3>\n<ul>\n<li>\n<p>Learn the syntax of the CQL <code>SELECT</code> command</p>\n</li>\n<li>\n<p>Execute a <code>SELECT</code> statement that we have prepared for you to retrieve Cristina&rsquo;s row from the <code>users</code> table</p>\n</li>\n</ul>\n<h4>For those unfamiliar with SQL, the suspense of seeing the data querying command is probably killing you. But, for the everybody else, you have already guessed it. It&rsquo;s a <code>SELECT</code> command that looks a lot like SQL. Let&rsquo;s take a look.</h4>\n<h4><strong>Step 1:</strong> Inspect the following command to identify:</h4>\n<ul>\n<li>\n<p>Keyspace name</p>\n</li>\n<li>\n<p>Table name</p>\n</li>\n<li>\n<p>List of columns the command retrieves</p>\n</li>\n<li>\n<p><code>WHERE</code> clause that specifies the retrieved row(s)</p>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/SelectUser.png\" alt=\"SelectUser\" title=\"SelectUser\" /></p>\n</li>\n</ul>\n<hr />\n<h4><strong>Note:</strong></h4>\n<blockquote>\n<h4>The list of retrieved columns can be a comma-separated list, or you can use splat (<code>*</code>) to retrieve all columns.</h4>\n<h4></h4>\n<h4>To specify a <code>uuid</code>, copy and paste the entire value including the hyphens. There are NO quotes around <code>uuid</code> values.</h4>\n</blockquote>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966244_1231340955",
      "id": "paragraph_1593594427797_1701326174",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:86"
    },
    {
      "text": "%md\r\n\r\n\r\n  **Step 2:** Copy and paste this command in the next cell (replacing `<userid-value-goes-here>` with Cristina's `userid` value from the previous cell):\r\n\r\n    SELECT * FROM killrvideo.users WHERE userid = <userid-value-goes-here>;\r\n\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> Copy and paste this command in the next cell (replacing <code>&lt;userid-value-goes-here&gt;</code> with Cristina&rsquo;s <code>userid</code> value from the previous cell):</h4>\n<pre><code>SELECT * FROM killrvideo.users WHERE userid = &lt;userid-value-goes-here&gt;;\n</code></pre>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966244_387341598",
      "id": "paragraph_1593594427617_-1553060495",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:87"
    },
    {
      "text": "// Query for the row associated with Cristina by using her userid\r\n// Copy and paste the SELECT statement from the previous row\r\n// Don't forget to update the userid value\r\n// Execute this cell (click here and then SHIFT+ENTER or click the Run button in the top-right corner of this cell)\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966245_321930392",
      "id": "paragraph_1593594427577_-1299101472",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:88"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966245_912197987",
      "id": "paragraph_1593594427457_-1887640958",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:89"
    },
    {
      "text": "\r\n%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\r\n# <center><span style=\"color:teal\">Get Jeff's Email Address</span></center>\r\n\r\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\r\n- Write a query from scratch\r\n\r\n<br>\r\n#### <span style=\"color:teal\"><b>Step 1:</b></span> In the next cell, query the `users` table for Jeff's email address.\r\n\r\n<br>\r\n<details>\r\n<summary><i><span style=\"color:blue\">Need a hint on what to change? Click here.</span></i></summary>\r\n> The query to get Jeff's email address looks a lot like the query in the previous section except:\r\n> - Obviously, you want Jeff's email and not Cristina's, so you will need to set the `userid` value in the `WHERE` clause to Jeff's `userid` value\r\n> - Also, you don't need to retrieve all the columns for Jeff, just the `email` column\r\n</details>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Want the CQL statement? Click here.</span></i></summary>\r\n Remember, you will need to copy and paste Jeff's `userid` value where it says `<jeff's-userid-value-goes-here>`.\r\n\r\n```\r\nSELECT email FROM killrvideo.users WHERE userid = <jeff's-userid-value-goes-here>;\r\n```\r\n\r\n</details>",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">Get Jeff&rsquo;s Email Address</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>Write a query from scratch</li>\n</ul>\n<br>\n#### <span style=\"color:teal\"><b>Step 1:</b></span> In the next cell, query the `users` table for Jeff's email address.\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Need a hint on what to change? Click here.</span></i></summary>\n> The query to get Jeff's email address looks a lot like the query in the previous section except:\n> - Obviously, you want Jeff's email and not Cristina's, so you will need to set the `userid` value in the `WHERE` clause to Jeff's `userid` value\n> - Also, you don't need to retrieve all the columns for Jeff, just the `email` column\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Want the CQL statement? Click here.</span></i></summary>\n Remember, you will need to copy and paste Jeff's `userid` value where it says `<jeff's-userid-value-goes-here>`.\n<pre><code>SELECT email FROM killrvideo.users WHERE userid = &lt;jeff's-userid-value-goes-here&gt;;\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966245_134165044",
      "id": "paragraph_1593594833063_-1183528461",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:90"
    },
    {
      "text": "\r\n\r\n// Query for the email associated with Jeff by using his userid\r\n\r\n// Write the SELECT statement\r\n\r\n// Don't forget to update the userid value\r\n\r\n// Execute the query (click here and then SHIFT+ENTER or click the Run button in the top-right corner of this cell)\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966245_1483474056",
      "id": "paragraph_1593594836962_1288014955",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:91"
    },
    {
      "text": "\r\n%md\r\n\r\n  **Step 2:** Compare your query results.\r\n\r\n-  If this is what you see, you're good to go\r\n\r\n![QueryResult](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/QueryResult.png \"QueryResult\")\r\n\r\n#### OK, we admit it.\r\n\r\n#### CQL syntax is close enough to SQL syntax, that the query was, well, anticlimactic.\r\n\r\n#### But let's briefly review the results.\r\n\r\n\r\n\r\n  **Step 3:** Review the results from your query.\r\n\r\n-  Your results should only contain the `email` column.\r\n\r\n-  The value of the `email` column should be as shown above.\r\n\r\n* * * * *\r\n\r\n#### **Note:**\r\n\r\n> #### The CQL syntax is like the SQL syntax, however, there are differences in the languages.\r\n> #### In CQL, you may only query tables based on their primary keys.\r\n> #### We'll investigate and explain this in more detail in the data modeling notebook.\r\n> #### For now, we'll just focus on the CQL commands, but it's worth noting that CQL is not a complete replacement for SQL.\r\n\r\n* * * * *\r\n\r\n\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\")",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> Compare your query results.</h4>\n<ul>\n<li>If this is what you see, you&rsquo;re good to go</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/QueryResult.png\" alt=\"QueryResult\" title=\"QueryResult\" /></p>\n<h4>OK, we admit it.</h4>\n<h4>CQL syntax is close enough to SQL syntax, that the query was, well, anticlimactic.</h4>\n<h4>But let&rsquo;s briefly review the results.</h4>\n<h4><strong>Step 3:</strong> Review the results from your query.</h4>\n<ul>\n<li>\n<p>Your results should only contain the <code>email</code> column.</p>\n</li>\n<li>\n<p>The value of the <code>email</code> column should be as shown above.</p>\n</li>\n</ul>\n<hr />\n<h4><strong>Note:</strong></h4>\n<blockquote>\n<h4>The CQL syntax is like the SQL syntax, however, there are differences in the languages.</h4>\n<h4>In CQL, you may only query tables based on their primary keys.</h4>\n<h4>We&rsquo;ll investigate and explain this in more detail in the data modeling notebook.</h4>\n<h4>For now, we&rsquo;ll just focus on the CQL commands, but it&rsquo;s worth noting that CQL is not a complete replacement for SQL.</h4>\n</blockquote>\n<hr />\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966245_828482137",
      "id": "paragraph_1593594838081_1207666737",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:92"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966246_488903161",
      "id": "paragraph_1593594838542_-375337166",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:93"
    },
    {
      "text": "\r\n%md\r\n\r\n### UPDATE Command\r\n\r\nIn this section, you will do the following things:\r\n\r\n-  Learn the syntax of the CQL UPDATE command\r\n\r\n-  Execute a UPDATE statement that we have prepared for you to update Jeff's email address\r\n\r\n\r\nBy now, you should expect that updating data with CQL is easy and obvious - and you'd be right!\r\n\r\nLet's say we want to update the Jeff's email in the `users` table to `jeffc@fenago.com`.\r\n\r\n\r\n  **Step 1:** Inspect the following `UPDATE` command.\r\n\r\n-  Identify the keyspace name\r\n\r\n-  Identify the table name\r\n\r\n-  Identify the `SET` clauses, i.e., the column(s) being updated and the new value(s)\r\n\r\n-  Identify the `WHERE` clause\r\n\r\n    ![UpdateUserEmail](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UpdateUserEmail.png)\r\n\r\n#### You see in the `SET` clause we specify the column(s) we want to update and the associated value(s).\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>UPDATE Command</h3>\n<p>In this section, you will do the following things:</p>\n<ul>\n<li>\n<p>Learn the syntax of the CQL UPDATE command</p>\n</li>\n<li>\n<p>Execute a UPDATE statement that we have prepared for you to update Jeff&rsquo;s email address</p>\n</li>\n</ul>\n<p>By now, you should expect that updating data with CQL is easy and obvious - and you&rsquo;d be right!</p>\n<p>Let&rsquo;s say we want to update the Jeff&rsquo;s email in the <code>users</code> table to <code>jeffc@fenago.com</code>.</p>\n<h4><strong>Step 1:</strong> Inspect the following <code>UPDATE</code> command.</h4>\n<ul>\n<li>\n<p>Identify the keyspace name</p>\n</li>\n<li>\n<p>Identify the table name</p>\n</li>\n<li>\n<p>Identify the <code>SET</code> clauses, i.e., the column(s) being updated and the new value(s)</p>\n</li>\n<li>\n<p>Identify the <code>WHERE</code> clause</p>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/UpdateUserEmail.png\" alt=\"UpdateUserEmail\" /></p>\n</li>\n</ul>\n<h4>You see in the <code>SET</code> clause we specify the column(s) we want to update and the associated value(s).</h4>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966246_1347439549",
      "id": "paragraph_1593594838230_-882418548",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:94"
    },
    {
      "text": "%md\r\n\r\n  **Step 2:** Copy and paste this command in the next cell (replacing with Jeff's userid value).\r\n\r\n    UPDATE killrvideo.users SET email = 'jeffc@fenago.com' WHERE userid = <Jeff's-userid-value-goes-here>;\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> Copy and paste this command in the next cell (replacing with Jeff&rsquo;s userid value).</h4>\n<pre><code>UPDATE killrvideo.users SET email = 'jeffc@fenago.com' WHERE userid = &lt;Jeff's-userid-value-goes-here&gt;;\n</code></pre>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966246_-443745119",
      "id": "paragraph_1593594837900_-35306967",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:95"
    },
    {
      "text": "\r\n// Paste the update command in this cell\r\n// Copy and paste Jeff's userid value as indicated\r\n// Execute the update by SHIFT+ENTER or click the Run button in the top-right corner of this cell\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966246_315992474",
      "id": "paragraph_1593594928140_1863537283",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:96"
    },
    {
      "text": "\r\n%md\r\n\r\n  **Step 3:** Execute the following cell and verify the table looks like it should.\r\n\r\n-  Verify the command updated Jeff's email as desired\r\n\r\n-  Make sure none of the other rows were affected\r\n\r\n\r\n\r\n\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\")\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 3:</strong> Execute the following cell and verify the table looks like it should.</h4>\n<ul>\n<li>\n<p>Verify the command updated Jeff&rsquo;s email as desired</p>\n</li>\n<li>\n<p>Make sure none of the other rows were affected</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966246_-651899152",
      "id": "paragraph_1593594837730_256863939",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:97"
    },
    {
      "text": "%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\r\n# <center><span style=\"color:teal\">Update Cristina's Email</span></center>\r\n\r\n<span style=\"color:teal\">In this section, you will do the following things:</span>\r\n- Write an `UPDATE` command from scratch\r\n- Change Cristina's email to `cristinav@fenago.com`\r\n\r\nHere's your chance to shine!\r\n\r\nSee if you can write the CQL `UPDATE` command without any coaching.\r\n\r\n\r\n<span style=\"color:teal\"><b>Step 1:</b></span> Write and execute the `UPDATE` command in the next cell.\r\n\r\n<br>\r\n<details>\r\n<summary><i><span style=\"color:blue\">Decided you want some coaching after all? Click here.</span></i></summary>\r\n\r\nThis command looks a lot like the command you used to update Jeff's email.\r\nExcept you need to use a different `email` value and a different `userid` value.\r\nYou can find Cristina's `userid` value in the results of the previous cell.\r\n</details>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Are you lost and/or lazy and just want the command? Click here.</span></i></summary>\r\n Remember, you need to copy and paste Cristina's `userid` value where it says `<Cristina's-userid-value-goes-here>`\r\n\r\n```\r\nUPDATE killrvideo.users SET email = 'cristinav@fenago.com' WHERE userid = <Cristina's-userid-value-goes-here>;\r\n```\r\n\r\n</details>\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">Update Cristina&rsquo;s Email</span></center></h1>\n<p><span style=\"color:teal\">In this section, you will do the following things:</span></p>\n<ul>\n<li>Write an <code>UPDATE</code> command from scratch</li>\n<li>Change Cristina&rsquo;s email to <code>cristinav@fenago.com</code></li>\n</ul>\n<p>Here&rsquo;s your chance to shine!</p>\n<p>See if you can write the CQL <code>UPDATE</code> command without any coaching.</p>\n<p><span style=\"color:teal\"><b>Step 1:</b></span> Write and execute the <code>UPDATE</code> command in the next cell.</p>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Decided you want some coaching after all? Click here.</span></i></summary>\n<p>This command looks a lot like the command you used to update Jeff&rsquo;s email.<br />\nExcept you need to use a different <code>email</code> value and a different <code>userid</code> value.<br />\nYou can find Cristina&rsquo;s <code>userid</code> value in the results of the previous cell.</p>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Are you lost and/or lazy and just want the command? Click here.</span></i></summary>\n Remember, you need to copy and paste Cristina's `userid` value where it says `<Cristina's-userid-value-goes-here>`\n<pre><code>UPDATE killrvideo.users SET email = 'cristinav@fenago.com' WHERE userid = &lt;Cristina's-userid-value-goes-here&gt;;\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966247_-1552287397",
      "id": "paragraph_1593594904720_-1312293995",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:98"
    },
    {
      "text": "\r\n// Write the UPDATE command in this cell\r\n// Copy and paste Cristina's userid value as indicated\r\n// Execute the update by SHIFT+ENTER or click the Run button in the top-right corner of this cell\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966254_1645743549",
      "id": "paragraph_1593594905462_490725579",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:99"
    },
    {
      "text": "\r\n%md\r\n\r\n  **Step 2:** Verify the `UPDATE` worked as expected.\r\n\r\n-  Execute the following cell\r\n\r\n-  The cell looks empty because we have hidden the code editor - just click the *CL.ONE* button\r\n\r\n-  Verify the command updated Cristina's email as desired\r\n\r\n\r\n\r\n\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\")\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> Verify the <code>UPDATE</code> worked as expected.</h4>\n<ul>\n<li>\n<p>Execute the following cell</p>\n</li>\n<li>\n<p>The cell looks empty because we have hidden the code editor - just click the <em>CL.ONE</em> button</p>\n</li>\n<li>\n<p>Verify the command updated Cristina&rsquo;s email as desired</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966254_-1864812961",
      "id": "paragraph_1593594905638_-980341892",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:100"
    },
    {
      "text": "\r\n%md\r\n\r\n### DELETE Column Command\r\n\r\nIn this section, you will do the following things:\r\n\r\n- Learn the syntax of the CQL DELETE command\r\n\r\n- Execute a DELETE command that we have prepared for you to delete Jeff's row\r\n\r\n#### **Note:**\r\n\r\nThere are many ways to delete data in Cassandra with CQL:\r\n\r\n- Delete a specific column from a row\r\n- Delete an entire row\r\n- Delete the *contents* of a table, or delete the *entire* table\r\n- Even delete an entire keyspace, but we won't cover that here\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h3>DELETE Column Command</h3>\n<p>In this section, you will do the following things:</p>\n<ul>\n<li>\n<p>Learn the syntax of the CQL DELETE command</p>\n</li>\n<li>\n<p>Execute a DELETE command that we have prepared for you to delete Jeff&rsquo;s row</p>\n</li>\n</ul>\n<h4><strong>Note:</strong></h4>\n<p>There are many ways to delete data in Cassandra with CQL:</p>\n<ul>\n<li>Delete a specific column from a row</li>\n<li>Delete an entire row</li>\n<li>Delete the <em>contents</em> of a table, or delete the <em>entire</em> table</li>\n<li>Even delete an entire keyspace, but we won&rsquo;t cover that here</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966255_1994902691",
      "id": "paragraph_1593594905261_-1636670181",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:101"
    },
    {
      "text": "%md\r\n\r\n  **Step 1:** Inspect this command that deletes a specific column.\r\n\r\n![DeleteUserEmail](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/DeleteUserEmail.png)\r\n\r\nRemember that Cassandra supports sparse rows (i.e., rows that do not contain data in all columns).\r\n\r\nSo, we can delete data from columns that are not in the primary key\r\n\r\n\r\n  **Step 2:** Copy, paste and execute the following `UPDATE` example.\r\n\r\n-  Be sure to paste in Jeff's `userid` value, which you can find in the previous cell\r\n\r\n<!-- -->\r\n\r\n    DELETE email FROM killrvideo.users WHERE userid = <Jeff's-userid-value-goes-here>;\r\n\r\n\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 1:</strong> Inspect this command that deletes a specific column.</h4>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/DeleteUserEmail.png\" alt=\"DeleteUserEmail\" /></p>\n<p>Remember that Cassandra supports sparse rows (i.e., rows that do not contain data in all columns).</p>\n<p>So, we can delete data from columns that are not in the primary key</p>\n<h4><strong>Step 2:</strong> Copy, paste and execute the following <code>UPDATE</code> example.</h4>\n<ul>\n<li>Be sure to paste in Jeff&rsquo;s <code>userid</code> value, which you can find in the previous cell</li>\n</ul>\n<!-- -->\n<pre><code>DELETE email FROM killrvideo.users WHERE userid = &lt;Jeff's-userid-value-goes-here&gt;;\n</code></pre>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966255_-1084784363",
      "id": "paragraph_1593594905382_-1999880511",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:102"
    },
    {
      "text": "// Copy and paste the DELETE command from the previous cell\r\n// Copy and paste Jeff's userid value as indicated\r\n// Execute the delete by SHIFT+ENTER or click the Run button in the top-right corner of this cell\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966255_1915815510",
      "id": "paragraph_1593594905041_-1516508525",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:103"
    },
    {
      "text": "%md\r\n\r\n  **Step 3:** Verify the `DELETE` worked as expected.\r\n\r\n-  Execute the following cell:\r\n\r\n-  Verify the command deleted Jeff's email as desired\r\n\r\n\r\n\r\n\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\")",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 3:</strong> Verify the <code>DELETE</code> worked as expected.</h4>\n<ul>\n<li>\n<p>Execute the following cell:</p>\n</li>\n<li>\n<p>Verify the command deleted Jeff&rsquo;s email as desired</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966255_455970903",
      "id": "paragraph_1593594904981_-1216781679",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:104"
    },
    {
      "text": "%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\" )\r\n# <center><span style=\"color:teal\">Delete an Entire Row</span></center>\r\n\r\n### <span style=\"color:teal\">In this section, you will do the following things:</span>\r\n- Delete an entire row from the `users` table\r\n\r\n<span style=\"color:teal\"><b>Step 1:</b></span> In the next cell, write and execute a command to delete Cristina's row from the `users` table.\r\n- Remember, to delete an entire row, leave the column list blank\r\n<br>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Want a bit more of a hint? Click here.</span></i></summary>\r\nThis step should be pretty easy - of course, it's not like the previous steps were really rocket-science.\r\nHey, this is CQL, so it's supposed to be easy.\r\nAnyway, to delete the entire row, you don't list any columns names in the column list right after the `DELETE` keyword.\r\n \r\nYep, just leave it blank.\r\n\r\nSo the command for this step looks like the previous step's command, except:\r\n- There is no column list\r\n- You will need to change the `userid` to Cristina's `userid`\r\n</details>\r\n\r\n<details>\r\n<summary><i><span style=\"color:blue\">Want the command? Click here.</span></i></summary>\r\n Remember to copy and paste Cristina's `userid` where it says `<Cristina's-userid-value-goes-here>`.\r\n\r\n```\r\nDELETE FROM killrvideo.users WHERE userid = <Cristina's-userid-value-goes-here>;\r\n```\r\n\r\n</details>\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-12T14:49:38+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<h1><center><span style=\"color:teal\">Delete an Entire Row</span></center></h1>\n<h3><span style=\"color:teal\">In this section, you will do the following things:</span></h3>\n<ul>\n<li>Delete an entire row from the <code>users</code> table</li>\n</ul>\n<p><span style=\"color:teal\"><b>Step 1:</b></span> In the next cell, write and execute a command to delete Cristina&rsquo;s row from the <code>users</code> table.</p>\n<ul>\n<li>Remember, to delete an entire row, leave the column list blank</li>\n</ul>\n<br>\n<details>\n<summary><i><span style=\"color:blue\">Want a bit more of a hint? Click here.</span></i></summary>\nThis step should be pretty easy - of course, it's not like the previous steps were really rocket-science.\nHey, this is CQL, so it's supposed to be easy.\nAnyway, to delete the entire row, you don't list any columns names in the column list right after the `DELETE` keyword.\n<p>Yep, just leave it blank.</p>\n<p>So the command for this step looks like the previous step&rsquo;s command, except:</p>\n<ul>\n<li>There is no column list</li>\n<li>You will need to change the <code>userid</code> to Cristina&rsquo;s <code>userid</code></li>\n</ul>\n</details>\n<details>\n<summary><i><span style=\"color:blue\">Want the command? Click here.</span></i></summary>\n Remember to copy and paste Cristina's `userid` where it says `<Cristina's-userid-value-goes-here>`.\n<pre><code>DELETE FROM killrvideo.users WHERE userid = &lt;Cristina's-userid-value-goes-here&gt;;\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966255_1302578927",
      "id": "paragraph_1593594904521_1877344116",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "dateStarted": "2020-10-12T14:49:35+0000",
      "dateFinished": "2020-10-12T14:49:35+0000",
      "status": "FINISHED",
      "$$hashKey": "object:105"
    },
    {
      "text": "// Write the DELETE command here to delete Cristina's row from the users table\r\n// Copy and paste Cristina's userid value as indicated\r\n// Execute the delete by SHIFT+ENTER or click the Run button in the top-right corner of this cell\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966256_1063934442",
      "id": "paragraph_1593595009521_892197626",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:106"
    },
    {
      "text": "\r\n%md\r\n\r\n  **Step 2:** Verify the `DELETE` worked as expected.\r\n\r\n-  Execute the following cell\r\n\r\n-  Again, the cell only *looks* empty because we have hidden the code editor - just click the *CL.ONE* button\r\n\r\n-  Verify the Cristina's row is gone\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 2:</strong> Verify the <code>DELETE</code> worked as expected.</h4>\n<ul>\n<li>\n<p>Execute the following cell</p>\n</li>\n<li>\n<p>Again, the cell only <em>looks</em> empty because we have hidden the code editor - just click the <em>CL.ONE</em> button</p>\n</li>\n<li>\n<p>Verify the Cristina&rsquo;s row is gone</p>\n</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966259_1720286369",
      "id": "paragraph_1593595010462_-462091508",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:107"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966259_868531171",
      "id": "paragraph_1593595010261_145060344",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:108"
    },
    {
      "text": "\r\n\r\n%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\")\r\n\r\nTruncate the Table\r\n\r\n### In this section, you will do the following things:\r\n\r\n-  Learn the syntax of the CQL `TRUNCATE` command\r\n\r\n-  Delete all data from the `users` table\r\n\r\n\r\n  **Step 1:** Execute the following cell\r\n\r\n-  We want to delete all rows in the table\r\n-  We don't want to delete the table itself\r\n-  This command is so simple, we've written it for you in the next cell\r\n\r\n\r\n\r\n#### **Note:**\r\n\r\n- The next cell actually contains two CQL commands. The first command truncates the table as explained. The second command retrieves all the rows in the table.\r\n- When you execute the cell, CQL will perform the `TRUNCATE` command followed by the `SELECT`, and print the results of the `SELECT` command.\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<p>Truncate the Table</p>\n<h3>In this section, you will do the following things:</h3>\n<ul>\n<li>\n<p>Learn the syntax of the CQL <code>TRUNCATE</code> command</p>\n</li>\n<li>\n<p>Delete all data from the <code>users</code> table</p>\n</li>\n</ul>\n<h4><strong>Step 1:</strong> Execute the following cell</h4>\n<ul>\n<li>We want to delete all rows in the table</li>\n<li>We don&rsquo;t want to delete the table itself</li>\n<li>This command is so simple, we&rsquo;ve written it for you in the next cell</li>\n</ul>\n<h4><strong>Note:</strong></h4>\n<ul>\n<li>The next cell actually contains two CQL commands. The first command truncates the table as explained. The second command retrieves all the rows in the table.</li>\n<li>When you execute the cell, CQL will perform the <code>TRUNCATE</code> command followed by the <code>SELECT</code>, and print the results of the <code>SELECT</code> command.</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966259_-1504556540",
      "id": "paragraph_1593595010361_-1484228857",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:109"
    },
    {
      "text": "\r\n// To execute both commands in this cell, click here and then SHIFT+ENTER or click the Run button in the top-right corner of this cell\r\n// Delete the entire contents of the super\\_cool\\_table\r\n\r\nTRUNCATE killrvideo.users;\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966260_-1327602403",
      "id": "paragraph_1593595009942_-863120675",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:110"
    },
    {
      "text": "// Now inspect the table again\r\n\r\nSELECT * FROM killrvideo.users;",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966260_-239324251",
      "id": "paragraph_1593595010181_-1135840347",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:111"
    },
    {
      "text": "\r\n\r\n%md\r\n\r\n#### Look! No rows!\r\n- No rows from the query\r\n- Does the table still exist?\r\n- How could you tell?\r\n\r\n\r\n#### <span style=\"color:teal\"><b>Step 2:</b></span> Determine if the `users` table still exists in the `killrvideo` keyspace.\r\nThis final step is a bit more challenging because we aren't going to tell you what commands to use.\r\nIt's up to you and your superior knowledge to determine if, in the previous step, you deleted only the rows from the table, or the entire table.\r\nWrite some CQL in the next cell to demonstrate that the `users` table still exists.\r\n\r\n<details>\r\n\r\n<summary><i><span style=\"color:blue\">Maybe you're a little stuck? Click here.</span></i></summary>\r\n\r\n> Actually, you have several options on how you want to solve this.\r\n> In the first steps of this notebook, we used the `DESCRIBE` command to see the keyspace schema.\r\n> We also discussed using the schema explorer in the top-right corner of the notebook.\r\n> While either of these approaches work, maybe they are not the cowboy-way!\r\n> Could you have guessed that you could use the `DESCRIBE` command on a single table?\r\n> Give it a shot - we are betting you can figure it out.\r\n\r\n\r\n```\r\nDESCRIBE TABLE killrvideo.users;\r\n```\r\n\r\n</details>\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4>Look! No rows!</h4>\n<ul>\n<li>No rows from the query</li>\n<li>Does the table still exist?</li>\n<li>How could you tell?</li>\n</ul>\n<h4><span style=\"color:teal\"><b>Step 2:</b></span> Determine if the <code>users</code> table still exists in the <code>killrvideo</code> keyspace.</h4>\n<p>This final step is a bit more challenging because we aren&rsquo;t going to tell you what commands to use.<br />\nIt&rsquo;s up to you and your superior knowledge to determine if, in the previous step, you deleted only the rows from the table, or the entire table.<br />\nWrite some CQL in the next cell to demonstrate that the <code>users</code> table still exists.</p>\n<details>\n<summary><i><span style=\"color:blue\">Maybe you're a little stuck? Click here.</span></i></summary>\n<blockquote>\n<p>Actually, you have several options on how you want to solve this.<br />\nIn the first steps of this notebook, we used the <code>DESCRIBE</code> command to see the keyspace schema.<br />\nWe also discussed using the schema explorer in the top-right corner of the notebook.<br />\nWhile either of these approaches work, maybe they are not the cowboy-way!<br />\nCould you have guessed that you could use the <code>DESCRIBE</code> command on a single table?<br />\nGive it a shot - we are betting you can figure it out.</p>\n</blockquote>\n<pre><code>DESCRIBE TABLE killrvideo.users;\n</code></pre>\n</details>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966260_940878451",
      "id": "paragraph_1593595009710_-1211048719",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:112"
    },
    {
      "text": "%md\r\n\r\n  **Step 3:** Inspect the commands in the next two cells, then execute them in order.\r\n\r\n**Note:**\r\n\r\nYou may be wondering why we didn't put both commands in a single cell. The commands need to be in separate cells to allow the effects of the first cell to take effect fully before we can execute the second cell.\r\n\r\n\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<h4><strong>Step 3:</strong> Inspect the commands in the next two cells, then execute them in order.</h4>\n<p><strong>Note:</strong></p>\n<p>You may be wondering why we didn&rsquo;t put both commands in a single cell. The commands need to be in separate cells to allow the effects of the first cell to take effect fully before we can execute the second cell.</p>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966260_-883497577",
      "id": "paragraph_1593595009363_-816491437",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:113"
    },
    {
      "text": "// Deleting a table is also like SQL:\r\n// Click here and then SHIFT+ENTER or click the Run button in the top-right corner of this cell\r\n\r\nDROP TABLE killrvideo.users;\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966260_-890861819",
      "id": "paragraph_1593595172731_-1837793564",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:114"
    },
    {
      "text": "\r\n// Look for the deleted table\r\n// Click here and then SHIFT+ENTER or click the Run button in the top-right corner of this cell\r\n\r\nDESCRIBE TABLE killrvideo.users;",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966260_1760610813",
      "id": "paragraph_1593595173511_1530014926",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:115"
    },
    {
      "text": "%md\r\n\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\")\r\n\r\nCongratulations!!!!\r\n\r\n#### If you have made it to this point of this notebook successfully, you are armed with the essential CQL skills!\r\n\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<p>Congratulations!!!!</p>\n<h4>If you have made it to this point of this notebook successfully, you are armed with the essential CQL skills!</h4>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966261_-43206080",
      "id": "paragraph_1593595173863_814869034",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:116"
    },
    {
      "text": "\r\n%md\r\n![line](https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png \"line\")\r\n\r\nBonus Challenge: Use *cqlsh*\r\n\r\nIf you got done early and want something to do while you wait for\r\nothers, here's a bonus challenge\r\n\r\n### In this section, you will do the following things:\r\n\r\n-   #### Connect to your database from *cqlsh*\r\n\r\n\r\n#### *cqlsh* is a CQL command shell you can use outside of Studio. In this cell we'll show you how to connect it.\r\n",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p><img src=\"https://raw.githubusercontent.com/fenago/apache-cassandra/master/datadrax_images/line.png\" alt=\"line\" title=\"line\" /></p>\n<p>Bonus Challenge: Use <em>cqlsh</em></p>\n<p>If you got done early and want something to do while you wait for<br />\nothers, here&rsquo;s a bonus challenge</p>\n<h3>In this section, you will do the following things:</h3>\n<ul>\n<li>\n<h4>Connect to your database from <em>cqlsh</em></h4>\n</li>\n</ul>\n<h4><em>cqlsh</em> is a CQL command shell you can use outside of Studio. In this cell we&rsquo;ll show you how to connect it.</h4>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966262_-2027066441",
      "id": "paragraph_1593595173781_847743088",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:117"
    },
    {
      "text": "%sh\r\ncat > script.cli <<EOL\r\ndescribe tables\r\nEOL\r\ncqlsh -f  script.cli --keyspace=killrvideo",
      "user": "anonymous",
      "dateUpdated": "2020-10-12T14:48:36+0000",
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionSupport": false,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/sh",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966262_1767441204",
      "id": "paragraph_1593595173349_-1534674495",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:118"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionSupport": true,
          "completionKey": "TAB"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966269_647104323",
      "id": "paragraph_1595426053729_-1498645687",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:119"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2020-10-11T17:39:26+0000",
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/text",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1602437966269_316747982",
      "id": "paragraph_1593594339478_1217248217",
      "dateCreated": "2020-10-11T17:39:26+0000",
      "status": "READY",
      "$$hashKey": "object:120"
    }
  ],
  "name": "2_Using_CQL_Exercise_Advance",
  "id": "2FKHFTWAU",
  "defaultInterpreterGroup": "cassandra",
  "version": "0.9.0-preview1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/2_Using_CQL_Exercise_Advance"
}